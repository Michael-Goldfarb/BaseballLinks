[{"/Users/michaelgoldfarb/Desktop/OhConnections/web/web/src/index.js":"1","/Users/michaelgoldfarb/Desktop/OhConnections/web/web/src/reportWebVitals.js":"2","/Users/michaelgoldfarb/Desktop/OhConnections/web/web/src/App.js":"3","/Users/michaelgoldfarb/Desktop/OhConnections/web/web/src/pages/components/NavBar.js":"4","/Users/michaelgoldfarb/Desktop/OhConnections/web/web/src/pages/ConnectionsPage.js":"5","/Users/michaelgoldfarb/Documents/OhConnections/src/index.js":"6","/Users/michaelgoldfarb/Documents/OhConnections/src/reportWebVitals.js":"7","/Users/michaelgoldfarb/Documents/OhConnections/src/App.js":"8","/Users/michaelgoldfarb/Documents/OhConnections/src/pages/components/NavBar.js":"9","/Users/michaelgoldfarb/Documents/OhConnections/src/pages/inputs/03-15-2024/ConnectionsPage.js":"10","/Users/michaelgoldfarb/Documents/OhConnections/src/pages/inputs/03-16-2024/ConnectionsPage.js":"11","/Users/michaelgoldfarb/Documents/OhConnections/src/pages/inputs/03-18-2024/ConnectionsPage.js":"12","/Users/michaelgoldfarb/Documents/OhConnections/src/pages/inputs/03-17-2024/ConnectionsPage.js":"13","/Users/michaelgoldfarb/Documents/OhConnections/src/pages/inputs/03-15-2024/gameData.js":"14","/Users/michaelgoldfarb/Documents/OhConnections/src/pages/inputs/03-16-2024/gameData.js":"15","/Users/michaelgoldfarb/Documents/OhConnections/src/pages/inputs/03-18-2024/gameData.js":"16","/Users/michaelgoldfarb/Documents/OhConnections/src/pages/inputs/03-17-2024/gameData.js":"17"},{"size":535,"mtime":1709622997269,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1709622997270,"results":"20","hashOfConfig":"19"},{"size":465,"mtime":1709933150866,"results":"21","hashOfConfig":"19"},{"size":667,"mtime":1709933257532,"results":"22","hashOfConfig":"19"},{"size":13515,"mtime":1709935000978,"results":"23","hashOfConfig":"19"},{"size":535,"mtime":1710261002640,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1710261002782,"results":"26","hashOfConfig":"25"},{"size":1031,"mtime":1710261002620,"results":"27","hashOfConfig":"25"},{"size":1293,"mtime":1710261002643,"results":"28","hashOfConfig":"25"},{"size":21952,"mtime":1710261002643,"results":"29","hashOfConfig":"25"},{"size":21952,"mtime":1710261002682,"results":"30","hashOfConfig":"25"},{"size":21952,"mtime":1710261002752,"results":"31","hashOfConfig":"25"},{"size":21952,"mtime":1710261002719,"results":"32","hashOfConfig":"25"},{"size":2826,"mtime":1710261002669,"results":"33","hashOfConfig":"25"},{"size":2858,"mtime":1710261002696,"results":"34","hashOfConfig":"25"},{"size":2783,"mtime":1710261002768,"results":"35","hashOfConfig":"25"},{"size":2988,"mtime":1710261002725,"results":"36","hashOfConfig":"25"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"142qt2r",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sv7stq",{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/michaelgoldfarb/Desktop/OhConnections/web/web/src/index.js",[],[],"/Users/michaelgoldfarb/Desktop/OhConnections/web/web/src/reportWebVitals.js",[],[],"/Users/michaelgoldfarb/Desktop/OhConnections/web/web/src/App.js",[],[],"/Users/michaelgoldfarb/Desktop/OhConnections/web/web/src/pages/components/NavBar.js",[],[],"/Users/michaelgoldfarb/Desktop/OhConnections/web/web/src/pages/ConnectionsPage.js",["93"],[],"import React, { useState, useEffect } from 'react';\nimport './ConnectionsPage.css';\nimport baseballImg from '../images/baseball.png';\n\nconst ConnectionsPage = () => {\n  const initialTerms = ['Brook Lopez', 'Seth Curry', 'Jrue Holiday', 'Franz Wagner', 'Nikola Jokic', 'Shai Gilgeous-Alexander', 'Kevin Durant', 'Luka Doncic', 'Steve Kerr', 'Jason Kidd', 'Tyronn Lue', 'Steve Nash', 'Rasheed Wallace', 'Gary Payton', 'Charles Barkley', 'Karl Malone'];\n  const correctGroups = [\n    { number: 1, description: 'Most Technical Fouls', terms: ['Rasheed Wallace', 'Gary Payton', 'Charles Barkley', 'Karl Malone'],  color: '#4CAF50' },\n    { number: 1, description: 'NBA Players Turned Coaches', terms: ['Steve Kerr', 'Jason Kidd', 'Tyronn Lue', 'Steve Nash'],  color: '#e5de00' },\n    { number: 1, description: 'All Star Starters', terms: ['Nikola Jokic', 'Shai Gilgeous-Alexander', 'Kevin Durant', 'Luka Doncic'], color: '#e27602' },\n    { number: 1, description: 'Brothers in the NBA', terms: ['Brook Lopez', 'Seth Curry', 'Jrue Holiday', 'Franz Wagner'], color: '#de0a26' }]\n  \n  const [selectedTerms, setSelectedTerms] = useState([]);\n  const [showResultsPopup, setShowResultsPopup] = useState(false);\n  const [nextPuzzleCountdown, setNextPuzzleCountdown] = useState('');\n  const [userWon, setUserWon] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [remainingGroupsToReveal, setRemainingGroupsToReveal] = useState([]);\n  const [mistakes, setMistakes] = useState(4);\n  const [submittedSets, setSubmittedSets] = useState([]);\n  const [guessedGroups, setGuessedGroups] = useState([]);\n  const [terms, setTerms] = useState(initialTerms);\n  // const [terms, setTerms] = useState(() => {\n  //   const savedTerms = localStorage.getItem('terms');\n  //   return savedTerms ? JSON.parse(savedTerms) : initialTerms;\n  // });\n  // const [guessedGroups, setGuessedGroups] = useState(() => {\n  //   const savedGroups = localStorage.getItem('guessedGroups');\n  //   return savedGroups ? JSON.parse(savedGroups) : [];\n  // });\n  // const [mistakes, setMistakes] = useState(() => {\n  //   const savedMistakes = localStorage.getItem('mistakes');\n  //   return savedMistakes !== null ? parseInt(savedMistakes, 10) : 4;\n  // });\n  // const [submittedSets, setSubmittedSets] = useState(() => {\n  //   const savedSets = localStorage.getItem('submittedSets');\n  //   return savedSets ? JSON.parse(savedSets) : [];\n  // });\n  const [popupMessage, setPopupMessage] = useState(\"\");\n  const [showPopup, setShowPopup] = useState(false);\n\n  // useEffect(() => {\n  //   localStorage.setItem('terms', JSON.stringify(terms));\n  // }, [terms]);\n  \n  // useEffect(() => {\n  //   localStorage.setItem('mistakes', mistakes.toString());\n  // }, [mistakes]);\n\n  // useEffect(() => {\n  //   localStorage.setItem('submittedSets', JSON.stringify(submittedSets));\n  // }, [submittedSets]);\n\n  // useEffect(() => {\n  //   localStorage.setItem('guessedGroups', JSON.stringify(guessedGroups));\n  // }, [guessedGroups]);\n\n  const handleTermClick = (term) => {\n    if (selectedTerms.includes(term)) {\n      setSelectedTerms(selectedTerms.filter(t => t !== term));\n      setShowPopup(false);\n    } else {\n      if (selectedTerms.length < 4) {\n        setSelectedTerms([...selectedTerms, term]);\n        setShowPopup(false);\n      } else {\n        setPopupMessage(\"You cannot select more than 4 players.\");\n        setShowPopup(true);\n        setTimeout(() => setShowPopup(false), 2000);\n      }\n    }\n  };\n\n  const handleSubmit = () => {\n    if (gameOver || mistakes <= 0) {\n      return;\n    }\n    const currentSetSorted = [...selectedTerms].sort();\n    const currentSetString = currentSetSorted.join(',');\n  \n    if (submittedSets.includes(currentSetString)) {\n      setPopupMessage(\"You cannot guess the same 4 players twice.\");\n      setShowPopup(true);\n      setTimeout(() => setShowPopup(false), 2000);\n      return;\n    } else {\n      const oneAway = correctGroups.some(group => {\n        const matchingTerms = group.terms.filter(term => currentSetSorted.includes(term));\n        // If 3 terms match, and the selected group is not exactly the correct group, it's \"one away\"\n        return matchingTerms.length === 3 && group.terms.sort().join(',') !== currentSetString;\n      });\n\n      const guessColors = currentSetSorted.map(term => {\n        const group = correctGroups.find(group => group.terms.includes(term));\n        return group ? group.color : '#FFFFFF'; // Fallback color, you can remove this if all terms will have a group\n      });\n    \n      // Record the move with the colors for each term\n      setMoveHistory(prevHistory => [\n        ...prevHistory,\n        guessColors\n      ]);\n  \n      if (oneAway) {\n        if (mistakes > 1) {\n          setPopupMessage(\"One Away!\");\n          setShowPopup(true);\n          setTimeout(() => setShowPopup(false), 2000);\n          setSubmittedSets([...submittedSets, currentSetString]);\n          setMistakes(mistakes - 1);\n          return; \n        }\n      }\n\n      const foundGroup = correctGroups.find(group =>\n        group.terms.sort().join(',') === currentSetString\n      );\n      \n      if (foundGroup) {\n        const updatedGuessedGroups = [...guessedGroups, foundGroup];\n        setGuessedGroups(updatedGuessedGroups);\n        setTerms(terms.filter(term => !foundGroup.terms.includes(term)));\n        setSelectedTerms([]);\n        if (updatedGuessedGroups.length === correctGroups.length) {\n          setGameOver(true);\n          setUserWon(true);\n        }\n      } else {\n        setSubmittedSets([...submittedSets, currentSetString]);\n        setMistakes(mistakes - 1);\n        if (mistakes <= 1) {\n          setPopupMessage(\"Nice try!\");\n          setUserWon(false);\n          setShowPopup(true);\n          setTimeout(() => {\n            setShowPopup(false); // Ensure popup is hidden before revealing groups\n    \n            const remainingGroups = correctGroups.filter(group => \n                !guessedGroups.some(guessedGroup => \n                    guessedGroup.description === group.description\n                )\n            );\n    \n            setRemainingGroupsToReveal(remainingGroups);\n            setGameOver(true); // Mark the game as over\n            setSelectedTerms([]);\n            setMistakes(0); // Ensuring no more actions can be taken\n        }, 2000); // Match this with the popup timeout\n        return;\n        }\n      }\n    }\n  };\n  \n\n  useEffect(() => {\n    if (gameOver && remainingGroupsToReveal.length > 0) {\n      // Reveal the first group in the list after a delay\n      const timer = setTimeout(() => {\n        const [groupToReveal, ...restGroups] = remainingGroupsToReveal; // Destructure to get the first group and the rest\n      setGuessedGroups(prevGuessedGroups => [...prevGuessedGroups, groupToReveal]); // Add it to guessedGroups\n      setTerms(terms => terms.filter(term => !groupToReveal.terms.includes(term))); // Remove guessed terms from the terms array\n      setRemainingGroupsToReveal(restGroups); // Update to the rest of the groups\n    }, 1000);\n  \n      return () => clearTimeout(timer); // Cleanup the timer\n    }\n  }, [remainingGroupsToReveal, gameOver, terms]);\n  \n  \n  const handleShuffle = () => {\n    const shuffledTermsArray = shuffleArray([...terms]);\n    setTerms(shuffledTermsArray);\n  };\n\n  // A simple shuffle function for the terms\n  const shuffleArray = (array) => {\n    let currentIndex = array.length,  randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  };\n\n  const shuffledTermsArray = shuffleArray([...terms]);\n\n  const difficultyLevels = [\n    { name: 'Easy', color: '#4CAF50' },\n    { name: 'Medium', color: '#e5de00' },\n    { name: 'Hard', color: '#e27602' },\n    { name: 'Impossible', color: '#de0a26' },\n  ];\n  \n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      const now = new Date();\n      const nextPuzzleTimeET = new Date();\n      nextPuzzleTimeET.setHours(19, 0, 0, 0); // 7:00 PM ET\n      if (nextPuzzleTimeET < now) {\n        nextPuzzleTimeET.setDate(nextPuzzleTimeET.getDate() + 1);\n      }\n  \n      const timeUntilNextPuzzle = nextPuzzleTimeET - now;\n      const countdown = new Date(timeUntilNextPuzzle).toISOString().substr(11, 8);\n      setNextPuzzleCountdown(countdown);\n    }, 1000);\n  \n    return () => clearInterval(intervalId);\n  }, []);\n\n  \n  const renderResultsPopup = () => {\n    const message = userWon ? \"Good Job!\" : \"Next Time!\";\n    \n    return (\n      <div className=\"results-popup\" onClick={() => setShowResultsPopup(false)}>\n        <div className=\"results-content\" onClick={(e) => e.stopPropagation()}>\n          <button className=\"close-button\" onClick={() => setShowResultsPopup(false)}>X</button>\n          <h2 className=\"message-header\">{message}</h2>\n          <p className=\"game-number\">OhConnections #{correctGroups[0].number}</p>\n          <div className=\"difficulty-container\">\n            {difficultyLevels.map(level => (\n              <div key={level.name} className=\"difficulty-level\">\n                <span className=\"difficulty-color\" style={{ backgroundColor: level.color }}></span>\n                <span className=\"difficulty-name\">{level.name}</span>\n              </div>\n            ))}\n          </div>\n          <div className=\"game-summary-grid\">\n            {moveHistory.map((moveRow, index) => (\n              <div key={index} className=\"summary-row\">\n                {moveRow.map((color, colorIndex) => (\n                  <div key={colorIndex} className=\"summary-block\" style={{ backgroundColor: color }}></div>\n                ))}\n              </div>\n            ))}\n          </div>\n          <p className=\"next-puzzle-countdown\">NEXT BOARD IN: {nextPuzzleCountdown}</p>\n          <button className=\"copy-summary-button\" onClick={handleCopySummary}>Share Results</button>\n        </div>\n      </div>\n    );\n  };\n\n  \n\n\n  const handleCopySummary = () => {\n    // Generate the game summary string from the move history\n    const summaryString = moveHistory.map(moveRow => \n      moveRow.map(color => {\n        // You will need to convert the color to the corresponding emoji or text representation\n        // This is an example; you will need to map your actual colors to the desired output\n        switch (color) {\n          case correctGroups[0].color: return '🟩';\n          case correctGroups[1].color: return '🟨';\n          case correctGroups[2].color: return '🟧';\n          case correctGroups[3].color: return '🟥';\n          default: return '⬜️'; // Default for incorrect guesses or unmatched terms\n        }\n      }).join('')\n    ).join('\\n');\n  \n    // Use nextPuzzleCountdown for the NEXT PUZZLE IN part\n    const legend = `\\n\\n🟩 = Easy\\n🟨 = Medium\\n🟧 = Hard\\n🟥 = Impossible`;\n\n    const completeSummary = `OhConnections\\nBoard #${correctGroups[0].number}\\n\\n${summaryString}${legend}\\n\\nNEXT PUZZLE IN: ${nextPuzzleCountdown}\\n\\nwww.ohconnections.com`;\n    \n    navigator.clipboard.writeText(completeSummary).then(() => {\n      // Notify the user that the summary was copied, if needed.\n      setPopupMessage('Game summary copied to clipboard!');\n      setShowPopup(true);\n      setTimeout(() => setShowPopup(false), 2000);\n    }, (err) => {\n      console.error('Could not copy text: ', err);\n    });\n  };\n  \n  \n  \n  \n\n  return (\n    <div className=\"connections-game\">\n    <h1>Create four groups of four!</h1>\n    {showPopup && <div className=\"popup-message\">{popupMessage}</div>} {/* Move this above the .guessed-groups and .terms-grid */}\n    <div className=\"guessed-groups\">\n      {guessedGroups.map((group, index) => (\n        <div \n          key={index} \n          className=\"guessed-group-combined\"\n          style={{ backgroundColor: group.color }}\n        >\n          <div className=\"group-description\">{group.description}</div>\n          <div className=\"group-terms\">{group.terms.join(', ')}</div>\n        </div>\n      ))}\n    </div>\n    <div className=\"terms-grid\">\n      {terms.map((term, index) => (\n        <div key={index} className={`term-block ${selectedTerms.includes(term) ? 'selected' : ''}`} onClick={() => handleTermClick(term)}>\n          {term}\n        </div>\n      ))}\n    </div>\n    {!gameOver && (\n      <div className=\"mistakes-section\">\n        <div className=\"mistakes-indicator\">\n          <span className=\"mistakes-text\">Mistakes remaining: </span>\n          {Array.from({ length: mistakes }, (_, i) => (\n            <img key={i} src={baseballImg} alt=\"Baseball\" className=\"baseball-icon\" />\n          ))}\n        </div>\n      </div>\n    )}\n    {!gameOver ? (\n      <div className=\"game-controls\">\n        <button onClick={handleShuffle}>Shuffle</button>\n        <button onClick={() => setSelectedTerms([])} disabled={selectedTerms.length === 0}>Deselect All</button>\n        <button onClick={handleSubmit} disabled={selectedTerms.length !== 4}>Submit</button>\n      </div>\n    ) : (\n      <div className=\"game-over-controls\">\n        <button className=\"game-button\" onClick={() => setShowResultsPopup(true)}>View Results</button>\n      </div>\n    )}\n    {showResultsPopup && renderResultsPopup()}\n  </div>\n);\n\n  \n};\n\nexport default ConnectionsPage;","/Users/michaelgoldfarb/Documents/OhConnections/src/index.js",[],[],"/Users/michaelgoldfarb/Documents/OhConnections/src/reportWebVitals.js",[],[],"/Users/michaelgoldfarb/Documents/OhConnections/src/App.js",[],[],"/Users/michaelgoldfarb/Documents/OhConnections/src/pages/components/NavBar.js",[],[],"/Users/michaelgoldfarb/Documents/OhConnections/src/pages/inputs/03-15-2024/ConnectionsPage.js",["94","95"],[],"import React, { useState, useEffect } from 'react';\nimport '../../ConnectionsPage.css';\nimport { playerImages, initialTerms, correctGroups } from './gameData.js';\nimport baseballImg from '../../../images/baseball.png';\nimport mookieBetts from '../../../images/examples/mookiebetts.png';\nimport maxMuncy from '../../../images/examples/maxmuncy.png';\nimport joseAltuve from '../../../images/examples/josealtuve.png';\nimport freddieFreeman from '../../../images/examples/freddiefreeman.png';\nimport shoheiOhtani from '../../../images/examples/shoheiohtani.png';\nimport ronaldAcunaJr from '../../../images/examples/ronaldacunajr.png';\nimport miguelCabrera from '../../../images/examples/miguelcabrera.png';\nimport salvadorPerez from '../../../images/examples/salvadorperez.png';\n\nconst ConnectionsPage = () => {\n  const gameSessionId = '03-15-2024';\n\n  const [cooldown, setCooldown] = useState(false);\n  const [guessIncorrect, setGuessIncorrect] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [width, height] = useWindowSize();\n  const [readyToShowPopUp, setReadyToShowPopUp] = useState(false);\n  const [nextPuzzleCountdown, setNextPuzzleCountdown] = useState('');\n  const [showHowToPlay, setShowHowToPlay] = useState(false);\n  const [userWon, setUserWon] = useState(false);\n  const [animateIndex, setAnimateIndex] = useState(null);\n  const [shake, setShake] = useState(false);\n  // const [selectedTerms, setSelectedTerms] = useState([]);    \n  // const [moveHistory, setMoveHistory] = useState([]);\n  // const [gameOver, setGameOver] = useState(false);\n  // const [showResultsPopup, setShowResultsPopup] = useState(false);\n  // const [remainingGroupsToReveal, setRemainingGroupsToReveal] = useState([]);\n  // const [mistakes, setMistakes] = useState(4);\n  // const [submittedSets, setSubmittedSets] = useState([]);\n  // const [guessedGroups, setGuessedGroups] = useState([]);\n  // const [terms, setTerms] = useState(initialTerms);\n  const [gameOver, setGameOver] = useState(() => {\n    const saved = localStorage.getItem(`gameOver-${gameSessionId}`);\n    return saved ? JSON.parse(saved) : false;\n  });\n  \n  const [showResultsPopup, setShowResultsPopup] = useState(() => {\n    const saved = localStorage.getItem(`showResultsPopup-${gameSessionId}`);\n    return saved ? JSON.parse(saved) : false;\n  });\n  \n  const [moveHistory, setMoveHistory] = useState(() => {\n    const saved = localStorage.getItem(`moveHistory-${gameSessionId}`);\n    return saved ? JSON.parse(saved) : [];\n  });\n  \n  const [remainingGroupsToReveal, setRemainingGroupsToReveal] = useState(() => {\n    const savedData = localStorage.getItem(`remainingGroupsToReveal-${gameSessionId}`);\n    return savedData ? JSON.parse(savedData) : [];\n  });\n  \n  const [selectedTerms, setSelectedTerms] = useState(() => {\n    const savedData = localStorage.getItem(`selectedTerms-${gameSessionId}`);\n    return savedData ? JSON.parse(savedData) : [];\n  });\n  \n  const [terms, setTerms] = useState(() => {\n    const savedTerms = localStorage.getItem(`terms-${gameSessionId}`);\n    return savedTerms ? JSON.parse(savedTerms) : initialTerms;\n  });\n  \n  const [guessedGroups, setGuessedGroups] = useState(() => {\n    const savedGroups = localStorage.getItem(`guessedGroups-${gameSessionId}`);\n    return savedGroups ? JSON.parse(savedGroups) : [];\n  });\n  \n  const [mistakes, setMistakes] = useState(() => {\n    const savedMistakes = localStorage.getItem(`mistakes-${gameSessionId}`);\n    return savedMistakes !== null ? parseInt(savedMistakes, 10) : 4;\n  });\n  \n  const [submittedSets, setSubmittedSets] = useState(() => {\n    const savedSets = localStorage.getItem(`submittedSets-${gameSessionId}`);\n    return savedSets ? JSON.parse(savedSets) : [];\n  });\n  \n  const [popupMessage, setPopupMessage] = useState(\"\");\n  const [showPopup, setShowPopup] = useState(false);\n\n  useEffect(() => {\n    localStorage.setItem(`terms-${gameSessionId}`, JSON.stringify(terms));\n  }, [terms, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`mistakes-${gameSessionId}`, mistakes.toString());\n  }, [mistakes, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`submittedSets-${gameSessionId}`, JSON.stringify(submittedSets));\n  }, [submittedSets, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`guessedGroups-${gameSessionId}`, JSON.stringify(guessedGroups));\n  }, [guessedGroups, gameSessionId]);\n\n  useEffect(() => {\n    localStorage.setItem(`remainingGroupsToReveal-${gameSessionId}`, JSON.stringify(remainingGroupsToReveal));\n  }, [remainingGroupsToReveal, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`selectedTerms-${gameSessionId}`, JSON.stringify(selectedTerms));\n  }, [selectedTerms, gameSessionId]);  \n\n  useEffect(() => {\n    localStorage.setItem(`gameOver-${gameSessionId}`, JSON.stringify(gameOver));\n  }, [gameOver, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`showResultsPopup-${gameSessionId}`, JSON.stringify(showResultsPopup));\n  }, [showResultsPopup, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`moveHistory-${gameSessionId}`, JSON.stringify(moveHistory));\n  }, [moveHistory, gameSessionId]);\n\n  useEffect(() => {\n    const updatedTerms = initialTerms.filter(term => \n      !guessedGroups.some(group => group.terms.includes(term))\n    );\n    \n    setTerms(updatedTerms);\n    localStorage.setItem(`terms-${gameSessionId}`, JSON.stringify(updatedTerms));\n  }, [guessedGroups, gameSessionId]);\n  \n\n  useEffect(() => {\n    const initTerms = shuffleArray(JSON.parse(localStorage.getItem(`terms-${gameSessionId}`)) || initialTerms);\n    const initGuessedGroups = JSON.parse(localStorage.getItem(`guessedGroups-${gameSessionId}`)) || [];   \n    setTerms(initTerms);\n    setGuessedGroups(initGuessedGroups);   \n  }, []);\n  \n  \n\n  const getVictoryMessage = (mistakesLeft) => {\n    switch(mistakesLeft) {\n      case 4: return \"Perfect!\";\n      case 3: return \"Great Job!\";\n      case 2: return \"Solid!\";\n      case 1: return \"Phew!\";\n      default: return \"Good Job!\";\n    }\n  };\n  \n  const handleTermClick = (term) => {\n    if (gameOver) return;\n    if (isSubmitting || gameOver || cooldown) return;\n    if (selectedTerms.includes(term)) {\n      setSelectedTerms(selectedTerms.filter(t => t !== term));\n      setShowPopup(false);\n    } else {\n      if (selectedTerms.length < 4) {\n        setSelectedTerms([...selectedTerms, term]);\n        setShowPopup(false);\n      } else {\n        setPopupMessage(\"You cannot select more than 4 players.\");\n        setShowPopup(true);\n        setTimeout(() => setShowPopup(false), 2000);\n      }\n    }\n  };\n\n  const handleSubmit = () => {\n    if (gameOver || mistakes <= 0 || selectedTerms.length !== 4 || cooldown) {\n        return;\n    }\n\n    const currentSetSorted = [...selectedTerms].sort();\n    const currentSetString = currentSetSorted.join(',');\n    \n    if (submittedSets.includes(currentSetString)) {\n      setPopupMessage(\"You cannot guess the same 4 players twice.\");\n      setShowPopup(true);\n      setTimeout(() => {\n          setShowPopup(false);\n          setIsSubmitting(false);\n      }, 2000);\n      return;\n    }\n  \n    setIsSubmitting(true);\n\n  setTimeout(() => {\n    const oneAway = correctGroups.some(group => {\n        const matchingTerms = group.terms.filter(term => currentSetSorted.includes(term));\n        return matchingTerms.length === 3 && group.terms.sort().join(',') !== currentSetString;\n    });\n\n    const guessColors = selectedTerms.map(term => {\n        const group = correctGroups.find(group => group.terms.includes(term));\n        return group ? group.color : '#FFFFFF';\n    });\n\n    setMoveHistory(prevHistory => [...prevHistory, guessColors]);\n        \n    const foundGroup = correctGroups.find(group => group.terms.sort().join(',') === currentSetString);\n\n    if (!foundGroup) {\n      setGuessIncorrect(true);\n      setShake(true);\n\n      setCooldown(true);\n        setTimeout(() => {\n          setCooldown(false);\n        }, 1200);\n\n      setTimeout(() => {\n        setShake(false);\n\n        if (oneAway && mistakes > 1) {\n          setPopupMessage(\"One Away!\");\n          setShowPopup(true);\n          setTimeout(() => setShowPopup(false), 2000);\n        }\n            \n        setSubmittedSets([...submittedSets, currentSetString]);\n        setMistakes(mistakes - 1);\n\n        if (mistakes <= 1) {\n            setGameOver(true);\n            setUserWon(false);\n            setPopupMessage(\"Nice try!\");\n            setShowPopup(true);\n            setTimeout(() => {\n                setShowPopup(false);\n                setRemainingGroupsToReveal(correctGroups.filter(group => !guessedGroups.some(guessedGroup => guessedGroup.description === group.description)));\n                setReadyToShowPopUp(true);\n                setSelectedTerms([]);\n                setMistakes(0);\n            }, 2000);\n        }\n        setGuessIncorrect(false);\n      }, 850);\n        } else {\n            const updatedTerms = terms.filter(term => !foundGroup.terms.includes(term));\n            const updatedGuessedGroups = [...guessedGroups, { ...foundGroup, terms: selectedTerms }];            \n            setTerms(updatedTerms);\n            setGuessedGroups(updatedGuessedGroups);\n            localStorage.setItem(`terms-${gameSessionId}`, JSON.stringify(updatedTerms));\n            localStorage.setItem(`guessedGroups-${gameSessionId}`, JSON.stringify(updatedGuessedGroups));\n            setSelectedTerms([]);\n\n          if (guessedGroups.length + 1 === correctGroups.length) {\n            setGameOver(true);\n            setUserWon(true);\n            setPopupMessage(getVictoryMessage(mistakes));\n            setShowPopup(true);\n            setTimeout(() => {\n                setShowPopup(false);\n                setShowResultsPopup(true);\n            }, 1000);\n          }\n        }\n      setIsSubmitting(false);\n    }, 1700);\n  };\n\n  \n  \n\n  function useWindowSize() {\n    const [size, setSize] = useState([window.innerWidth, window.innerHeight]);\n  \n    useEffect(() => {\n      const handleResize = () => {\n        setSize([window.innerWidth, window.innerHeight]);\n      };\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }, []);\n  \n    return size;\n  }\n\n  useEffect(() => {\n    if (selectedTerms.length > 0 && isSubmitting) {\n      selectedTerms.forEach((term, index) => {\n        setTimeout(() => {\n          setAnimateIndex(index);\n        }, index * 300);\n      });\n  \n      const lastAnimationDelay = selectedTerms.length * 500;\n      const timeoutId = setTimeout(() => {\n        setAnimateIndex(null);\n        setIsSubmitting(false);\n      }, lastAnimationDelay);\n  \n      return () => clearTimeout(timeoutId);\n    }\n  }, [isSubmitting, selectedTerms]);\n  \n  \n  useEffect(() => {\n    if (animateIndex !== null) {\n      const timeoutId = setTimeout(() => {\n        setAnimateIndex(null);\n      }, 500);\n  \n      return () => clearTimeout(timeoutId);\n    }\n  }, [animateIndex]);\n\n  useEffect(() => {\n    if (guessIncorrect) {\n      const timeoutId = setTimeout(() => {\n        setShake(false);\n      }, 500);\n      \n      return () => clearTimeout(timeoutId);\n    }\n  }, [guessIncorrect]);\n\n  useEffect(() => {\n    if (shake) {\n      const timer = setTimeout(() => {\n        setShake(false);\n        setGuessIncorrect(false);\n      }, 500);\n      return () => clearTimeout(timer);\n    }\n  }, [shake]);\n\n\n  \n  useEffect(() => {\n    if (gameOver && remainingGroupsToReveal.length > 0) {\n      const timer = setTimeout(() => {\n        const [groupToReveal, ...restGroups] = remainingGroupsToReveal;\n      setGuessedGroups(prevGuessedGroups => [...prevGuessedGroups, groupToReveal]);\n      setTerms(terms => terms.filter(term => !groupToReveal.terms.includes(term)));\n      setRemainingGroupsToReveal(restGroups);\n    }, 1000);\n  \n      return () => clearTimeout(timer);\n    }\n  }, [remainingGroupsToReveal, gameOver, terms]);\n\n  useEffect(() => {\n    if (gameOver && readyToShowPopUp && remainingGroupsToReveal.length === 0) {\n      const timer = setTimeout(() => {\n        setShowResultsPopup(true);\n      }, 1700);\n      return () => clearTimeout(timer);      \n    }\n  }, [remainingGroupsToReveal, gameOver, readyToShowPopUp]);\n  \n  \n  const handleShuffle = () => {\n    const shuffledTermsArray = shuffleArray([...terms]);\n    setTerms(shuffledTermsArray);\n  };\n\n  const shuffleArray = (array) => {\n    let currentIndex = array.length,  randomIndex;\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n    return array;\n  };\n  const shuffledTermsArray = shuffleArray([...terms]);\n\n  useEffect(() => {\n    setTerms(shuffleArray([...initialTerms]));\n  }, []);\n  \n  const difficultyLevels = [\n    { name: 'Easy', color: '#4CAF50' },\n    { name: 'Medium', color: '#e5de00' },\n    { name: 'Hard', color: '#e27602' },\n    { name: 'Impossible', color: '#de0a26' },\n  ];\n  \n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      const now = new Date();\n      const nextPuzzleTimeET = new Date();\n      nextPuzzleTimeET.setHours(19, 0, 0, 0); // 7:00 PM ET\n      if (nextPuzzleTimeET < now) {\n        nextPuzzleTimeET.setDate(nextPuzzleTimeET.getDate() + 1);\n      }\n  \n      const timeUntilNextPuzzle = nextPuzzleTimeET - now;\n      const countdown = new Date(timeUntilNextPuzzle).toISOString().substr(11, 8);\n      setNextPuzzleCountdown(countdown);\n    }, 1000);\n  \n    return () => clearInterval(intervalId);\n  }, []);\n\n  \n  const renderResultsPopup = () => {\n  const message = userWon ? getVictoryMessage(mistakes) : \"Next Time!\";\n    \n    return (\n      <div className=\"results-popup\" onClick={() => setShowResultsPopup(false)}>\n        <div className=\"results-content\" onClick={(e) => e.stopPropagation()}>\n          <button className=\"close-button\" onClick={() => setShowResultsPopup(false)}>X</button>\n          <h2 className=\"message-header\">{message}</h2>\n          <p className=\"game-number\">OhConnections #{correctGroups[0].number}</p>\n          <div className=\"difficulty-container\">\n            {difficultyLevels.map(level => (\n              <div key={level.name} className=\"difficulty-level\">\n                <span className=\"difficulty-color\" style={{ backgroundColor: level.color }}></span>\n                <span className=\"difficulty-name\">{level.name}</span>\n              </div>\n            ))}\n          </div>\n          <div className=\"game-summary-grid\">\n          {moveHistory.map((colorSet, index) => (\n            <div key={index} className=\"summary-row\">\n              {colorSet.map((color, colorIndex) => (\n                <div key={colorIndex} className=\"summary-block\" style={{ backgroundColor: color }}></div>\n              ))}\n            </div>\n          ))}\n\n          </div>\n          <p className=\"next-puzzle-countdown\">NEXT BOARD IN: {nextPuzzleCountdown}</p>\n          <button className=\"copy-summary-button\" onClick={handleCopySummary}>Share Results</button>\n        </div>\n      </div>\n    );\n  };\n\n  const handleCopySummary = () => {\n    const summaryString = moveHistory.map(moveRow => \n      moveRow.map(color => {\n        switch (color) {\n          case correctGroups[0].color: return '🟩';\n          case correctGroups[1].color: return '🟨';\n          case correctGroups[2].color: return '🟧';\n          case correctGroups[3].color: return '🟥';\n          default: return '⬜️';\n        }\n      }).join('')\n    ).join('\\n');\n  \n    const legend = `\\n\\n🟩 = Easy\\n🟨 = Medium\\n🟧 = Hard\\n🟥 = Impossible`;\n\n    const completeSummary = `OhConnections\\nBoard #${correctGroups[0].number}\\n\\n${summaryString}${legend}\\n\\nNEXT PUZZLE IN: ${nextPuzzleCountdown}\\n\\nwww.ohconnections.com`;\n    \n    navigator.clipboard.writeText(completeSummary).then(() => {\n      setPopupMessage('Game summary copied to clipboard!');\n      setShowPopup(true);\n      setTimeout(() => setShowPopup(false), 2000);\n    }, (err) => {\n      console.error('Could not copy text: ', err);\n    });\n  };\n  \n  \n  const renderHowToPlayPopup = () => {\n    if (!showHowToPlay) return null;\n  \n    return (\n      <div className=\"how-to-play-popup\" onClick={() => setShowHowToPlay(false)}>\n        <div className=\"how-to-play-content\" onClick={e => e.stopPropagation()}>\n          <button className=\"close-button\" onClick={() => setShowHowToPlay(false)}>X</button>\n          <h1>How to Play</h1>\n          <p>Goal: Find groups of four MLB players that have something in common</p>\n          <div className=\"example-section\">\n            <p>Example:</p>\n            <div className=\"example-group\">\n              <p>CURRENT DODGERS PLAYERS</p>\n              <div className=\"player-images\">\n                <img src={freddieFreeman} alt=\"Freddie Freeman\" />\n                <img src={mookieBetts} alt=\"Mookie Betts\" />\n                <img src={shoheiOhtani} alt=\"Shohei Ohtani\" />\n                <img src={maxMuncy} alt=\"Max Muncy\" />\n            </div>\n            </div>\n            <div className=\"example-group\">\n              <p>PLAYERS BORN IN VENEZUELA</p>\n              <div className=\"player-images\">\n                <img src={joseAltuve} alt=\"Jose Altuve\" />\n                <img src={ronaldAcunaJr} alt=\"Ronald Acuña Jr\" />\n                <img src={miguelCabrera} alt=\"Miguel Cabrera\" />\n                <img src={salvadorPerez} alt=\"Salvador Perez\" />\n            </div>\n            </div>\n          </div>\n          <p>Select four similar players and tap 'Submit' to check if you are correct</p>\n          <p>You have four incorrect guesses before the game ends</p>\n          <p>Each group is represented by a color: </p>\n          <div className=\"difficulty-container\">\n          {difficultyLevels.map(level => (\n            <div key={level.name} className=\"difficulty-level\">\n              <span className=\"difficulty-color\" style={{ backgroundColor: level.color }}></span>\n              <span className=\"difficulty-name\">{level.name}</span>\n            </div>\n          ))}\n        </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"connections-game\">\n    <div className=\"header-container\">\n      <div className=\"button-placeholder\"></div>\n      <h1>Create four groups of four!</h1>\n      <button className=\"game-controls button how-to-play-button\" onClick={() => setShowHowToPlay(true)}>How to Play</button>\n    </div>\n    {showPopup && <div className=\"popup-message\">{popupMessage}</div>}\n    <div className=\"guessed-groups\">\n      {guessedGroups.map((group, index) => (\n        <div \n          key={index} \n          className=\"guessed-group-combined\"\n          style={{ backgroundColor: group.color }}\n        >\n          <div className=\"group-images\">\n            {group.terms.map((term, termIndex) => (\n              <div key={termIndex} className=\"player-image-container\">\n                <img src={playerImages[term]} alt={term} className=\"guessed-player-image\" />\n                <div className=\"player-name-overlay\">{term.toUpperCase()}</div>\n              </div>\n            ))}\n          </div>\n          <div className=\"group-description\">{group.description}</div>\n        </div>\n      ))}\n    </div>\n\n    <div className=\"terms-grid\" style={{ gridTemplateColumns: width > 0 ? 'repeat(4, 1fr)' : 'repeat(2, 1fr)' }}>\n      {terms.map((term, index) => {\n        let imgSrc = playerImages[term];\n          let isSelected = selectedTerms.includes(term);\n          let isAnimating = selectedTerms.indexOf(term) === animateIndex;\n          let shouldShake = isSelected && guessIncorrect;\n          let isCooldown = cooldown;\n\n    return (\n      <div key={index} \n           className={`term-block ${isSelected ? 'selected' : ''} ${isAnimating ? 'jump-animation' : ''} ${shouldShake ? 'shake-animation' : ''} ${isSubmitting ? 'no-hover' : ''} ${isCooldown ? 'no-hover' : ''}`} \n           onClick={() => handleTermClick(term)}\n           style={{ cursor: isSubmitting ? 'default' : 'pointer' }}>\n        <img src={imgSrc} className=\"term-image\" alt={term} />\n        <div className=\"text-overlay\">{term}</div>\n      </div>\n\n          );\n      })}\n    </div>\n    {!gameOver && (\n      <div className=\"mistakes-section\">\n        <div className=\"mistakes-indicator\">\n          <span className=\"mistakes-text\">Mistakes remaining: </span>\n          {Array.from({ length: mistakes }, (_, i) => (\n            <img key={i} src={baseballImg} alt=\"Baseball\" className=\"baseball-icon\" />\n          ))}\n        </div>\n      </div>\n    )}\n    {!gameOver ? (\n      <div className=\"game-controls\">\n        <button \n          onClick={handleShuffle}\n          disabled={isSubmitting || shake || cooldown}\n          style={{ opacity: (isSubmitting || shake || cooldown) ? 0.5 : 1 }}>\n          Shuffle\n        </button>\n\n        <button \n          onClick={() => setSelectedTerms([])}\n          disabled={isSubmitting || shake || cooldown || selectedTerms.length === 0}\n          style={{ opacity: (isSubmitting || shake || cooldown) ? 0.5 : 1 }}>\n          Deselect All\n        </button>\n\n        <button \n          onClick={handleSubmit}\n          disabled={isSubmitting || shake || cooldown || selectedTerms.length !== 4}\n          style={{ opacity: (isSubmitting || shake || cooldown) ? 0.5 : 1 }}>\n          Submit\n        </button>\n      </div>\n    ) : (\n      <div className=\"game-over-controls\">\n        <button className=\"game-button\" onClick={() => setShowResultsPopup(true)}>View Results</button>\n      </div>\n    )}\n    {showResultsPopup && renderResultsPopup()}\n    {renderHowToPlayPopup()}\n    <a href=\"https://docs.google.com/forms/d/e/1FAIpQLScf3nrR79wVz0ZjBy6LaH18Xi9gH6RfwU8GMd3-O-luSJjB-Q/viewform?usp=sf_link\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"suggestions-link\">Suggestions</a>\n  </div>\n);\n\n  \n};\n\nexport default ConnectionsPage;","/Users/michaelgoldfarb/Documents/OhConnections/src/pages/inputs/03-16-2024/ConnectionsPage.js",["96","97"],[],"import React, { useState, useEffect } from 'react';\nimport '../../ConnectionsPage.css';\nimport { playerImages, initialTerms, correctGroups } from './gameData.js';\nimport baseballImg from '../../../images/baseball.png';\nimport mookieBetts from '../../../images/examples/mookiebetts.png';\nimport maxMuncy from '../../../images/examples/maxmuncy.png';\nimport joseAltuve from '../../../images/examples/josealtuve.png';\nimport freddieFreeman from '../../../images/examples/freddiefreeman.png';\nimport shoheiOhtani from '../../../images/examples/shoheiohtani.png';\nimport ronaldAcunaJr from '../../../images/examples/ronaldacunajr.png';\nimport miguelCabrera from '../../../images/examples/miguelcabrera.png';\nimport salvadorPerez from '../../../images/examples/salvadorperez.png';\n\nconst ConnectionsPage = () => {\n  const gameSessionId = '03-16-2024';\n\n  const [cooldown, setCooldown] = useState(false);\n  const [guessIncorrect, setGuessIncorrect] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [width, height] = useWindowSize();\n  const [readyToShowPopUp, setReadyToShowPopUp] = useState(false);\n  const [nextPuzzleCountdown, setNextPuzzleCountdown] = useState('');\n  const [showHowToPlay, setShowHowToPlay] = useState(false);\n  const [userWon, setUserWon] = useState(false);\n  const [animateIndex, setAnimateIndex] = useState(null);\n  const [shake, setShake] = useState(false);\n  // const [selectedTerms, setSelectedTerms] = useState([]);    \n  // const [moveHistory, setMoveHistory] = useState([]);\n  // const [gameOver, setGameOver] = useState(false);\n  // const [showResultsPopup, setShowResultsPopup] = useState(false);\n  // const [remainingGroupsToReveal, setRemainingGroupsToReveal] = useState([]);\n  // const [mistakes, setMistakes] = useState(4);\n  // const [submittedSets, setSubmittedSets] = useState([]);\n  // const [guessedGroups, setGuessedGroups] = useState([]);\n  // const [terms, setTerms] = useState(initialTerms);\n  const [gameOver, setGameOver] = useState(() => {\n    const saved = localStorage.getItem(`gameOver-${gameSessionId}`);\n    return saved ? JSON.parse(saved) : false;\n  });\n  \n  const [showResultsPopup, setShowResultsPopup] = useState(() => {\n    const saved = localStorage.getItem(`showResultsPopup-${gameSessionId}`);\n    return saved ? JSON.parse(saved) : false;\n  });\n  \n  const [moveHistory, setMoveHistory] = useState(() => {\n    const saved = localStorage.getItem(`moveHistory-${gameSessionId}`);\n    return saved ? JSON.parse(saved) : [];\n  });\n  \n  const [remainingGroupsToReveal, setRemainingGroupsToReveal] = useState(() => {\n    const savedData = localStorage.getItem(`remainingGroupsToReveal-${gameSessionId}`);\n    return savedData ? JSON.parse(savedData) : [];\n  });\n  \n  const [selectedTerms, setSelectedTerms] = useState(() => {\n    const savedData = localStorage.getItem(`selectedTerms-${gameSessionId}`);\n    return savedData ? JSON.parse(savedData) : [];\n  });\n  \n  const [terms, setTerms] = useState(() => {\n    const savedTerms = localStorage.getItem(`terms-${gameSessionId}`);\n    return savedTerms ? JSON.parse(savedTerms) : initialTerms;\n  });\n  \n  const [guessedGroups, setGuessedGroups] = useState(() => {\n    const savedGroups = localStorage.getItem(`guessedGroups-${gameSessionId}`);\n    return savedGroups ? JSON.parse(savedGroups) : [];\n  });\n  \n  const [mistakes, setMistakes] = useState(() => {\n    const savedMistakes = localStorage.getItem(`mistakes-${gameSessionId}`);\n    return savedMistakes !== null ? parseInt(savedMistakes, 10) : 4;\n  });\n  \n  const [submittedSets, setSubmittedSets] = useState(() => {\n    const savedSets = localStorage.getItem(`submittedSets-${gameSessionId}`);\n    return savedSets ? JSON.parse(savedSets) : [];\n  });\n  \n  const [popupMessage, setPopupMessage] = useState(\"\");\n  const [showPopup, setShowPopup] = useState(false);\n\n  useEffect(() => {\n    localStorage.setItem(`terms-${gameSessionId}`, JSON.stringify(terms));\n  }, [terms, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`mistakes-${gameSessionId}`, mistakes.toString());\n  }, [mistakes, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`submittedSets-${gameSessionId}`, JSON.stringify(submittedSets));\n  }, [submittedSets, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`guessedGroups-${gameSessionId}`, JSON.stringify(guessedGroups));\n  }, [guessedGroups, gameSessionId]);\n\n  useEffect(() => {\n    localStorage.setItem(`remainingGroupsToReveal-${gameSessionId}`, JSON.stringify(remainingGroupsToReveal));\n  }, [remainingGroupsToReveal, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`selectedTerms-${gameSessionId}`, JSON.stringify(selectedTerms));\n  }, [selectedTerms, gameSessionId]);  \n\n  useEffect(() => {\n    localStorage.setItem(`gameOver-${gameSessionId}`, JSON.stringify(gameOver));\n  }, [gameOver, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`showResultsPopup-${gameSessionId}`, JSON.stringify(showResultsPopup));\n  }, [showResultsPopup, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`moveHistory-${gameSessionId}`, JSON.stringify(moveHistory));\n  }, [moveHistory, gameSessionId]);\n\n  useEffect(() => {\n    const updatedTerms = initialTerms.filter(term => \n      !guessedGroups.some(group => group.terms.includes(term))\n    );\n    \n    setTerms(updatedTerms);\n    localStorage.setItem(`terms-${gameSessionId}`, JSON.stringify(updatedTerms));\n  }, [guessedGroups, gameSessionId]);\n  \n\n  useEffect(() => {\n    const initTerms = shuffleArray(JSON.parse(localStorage.getItem(`terms-${gameSessionId}`)) || initialTerms);\n    const initGuessedGroups = JSON.parse(localStorage.getItem(`guessedGroups-${gameSessionId}`)) || [];   \n    setTerms(initTerms);\n    setGuessedGroups(initGuessedGroups);   \n  }, []);\n  \n  \n\n  const getVictoryMessage = (mistakesLeft) => {\n    switch(mistakesLeft) {\n      case 4: return \"Perfect!\";\n      case 3: return \"Great Job!\";\n      case 2: return \"Solid!\";\n      case 1: return \"Phew!\";\n      default: return \"Good Job!\";\n    }\n  };\n  \n  const handleTermClick = (term) => {\n    if (gameOver) return;\n    if (isSubmitting || gameOver || cooldown) return;\n    if (selectedTerms.includes(term)) {\n      setSelectedTerms(selectedTerms.filter(t => t !== term));\n      setShowPopup(false);\n    } else {\n      if (selectedTerms.length < 4) {\n        setSelectedTerms([...selectedTerms, term]);\n        setShowPopup(false);\n      } else {\n        setPopupMessage(\"You cannot select more than 4 players.\");\n        setShowPopup(true);\n        setTimeout(() => setShowPopup(false), 2000);\n      }\n    }\n  };\n\n  const handleSubmit = () => {\n    if (gameOver || mistakes <= 0 || selectedTerms.length !== 4 || cooldown) {\n        return;\n    }\n\n    const currentSetSorted = [...selectedTerms].sort();\n    const currentSetString = currentSetSorted.join(',');\n    \n    if (submittedSets.includes(currentSetString)) {\n      setPopupMessage(\"You cannot guess the same 4 players twice.\");\n      setShowPopup(true);\n      setTimeout(() => {\n          setShowPopup(false);\n          setIsSubmitting(false);\n      }, 2000);\n      return;\n    }\n  \n    setIsSubmitting(true);\n\n  setTimeout(() => {\n    const oneAway = correctGroups.some(group => {\n        const matchingTerms = group.terms.filter(term => currentSetSorted.includes(term));\n        return matchingTerms.length === 3 && group.terms.sort().join(',') !== currentSetString;\n    });\n\n    const guessColors = selectedTerms.map(term => {\n        const group = correctGroups.find(group => group.terms.includes(term));\n        return group ? group.color : '#FFFFFF';\n    });\n\n    setMoveHistory(prevHistory => [...prevHistory, guessColors]);\n        \n    const foundGroup = correctGroups.find(group => group.terms.sort().join(',') === currentSetString);\n\n    if (!foundGroup) {\n      setGuessIncorrect(true);\n      setShake(true);\n\n      setCooldown(true);\n        setTimeout(() => {\n          setCooldown(false);\n        }, 1200);\n\n      setTimeout(() => {\n        setShake(false);\n\n        if (oneAway && mistakes > 1) {\n          setPopupMessage(\"One Away!\");\n          setShowPopup(true);\n          setTimeout(() => setShowPopup(false), 2000);\n        }\n            \n        setSubmittedSets([...submittedSets, currentSetString]);\n        setMistakes(mistakes - 1);\n\n        if (mistakes <= 1) {\n            setGameOver(true);\n            setUserWon(false);\n            setPopupMessage(\"Nice try!\");\n            setShowPopup(true);\n            setTimeout(() => {\n                setShowPopup(false);\n                setRemainingGroupsToReveal(correctGroups.filter(group => !guessedGroups.some(guessedGroup => guessedGroup.description === group.description)));\n                setReadyToShowPopUp(true);\n                setSelectedTerms([]);\n                setMistakes(0);\n            }, 2000);\n        }\n        setGuessIncorrect(false);\n      }, 850);\n        } else {\n            const updatedTerms = terms.filter(term => !foundGroup.terms.includes(term));\n            const updatedGuessedGroups = [...guessedGroups, { ...foundGroup, terms: selectedTerms }];            \n            setTerms(updatedTerms);\n            setGuessedGroups(updatedGuessedGroups);\n            localStorage.setItem(`terms-${gameSessionId}`, JSON.stringify(updatedTerms));\n            localStorage.setItem(`guessedGroups-${gameSessionId}`, JSON.stringify(updatedGuessedGroups));\n            setSelectedTerms([]);\n\n          if (guessedGroups.length + 1 === correctGroups.length) {\n            setGameOver(true);\n            setUserWon(true);\n            setPopupMessage(getVictoryMessage(mistakes));\n            setShowPopup(true);\n            setTimeout(() => {\n                setShowPopup(false);\n                setShowResultsPopup(true);\n            }, 1000);\n          }\n        }\n      setIsSubmitting(false);\n    }, 1700);\n  };\n\n  \n  \n\n  function useWindowSize() {\n    const [size, setSize] = useState([window.innerWidth, window.innerHeight]);\n  \n    useEffect(() => {\n      const handleResize = () => {\n        setSize([window.innerWidth, window.innerHeight]);\n      };\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }, []);\n  \n    return size;\n  }\n\n  useEffect(() => {\n    if (selectedTerms.length > 0 && isSubmitting) {\n      selectedTerms.forEach((term, index) => {\n        setTimeout(() => {\n          setAnimateIndex(index);\n        }, index * 300);\n      });\n  \n      const lastAnimationDelay = selectedTerms.length * 500;\n      const timeoutId = setTimeout(() => {\n        setAnimateIndex(null);\n        setIsSubmitting(false);\n      }, lastAnimationDelay);\n  \n      return () => clearTimeout(timeoutId);\n    }\n  }, [isSubmitting, selectedTerms]);\n  \n  \n  useEffect(() => {\n    if (animateIndex !== null) {\n      const timeoutId = setTimeout(() => {\n        setAnimateIndex(null);\n      }, 500);\n  \n      return () => clearTimeout(timeoutId);\n    }\n  }, [animateIndex]);\n\n  useEffect(() => {\n    if (guessIncorrect) {\n      const timeoutId = setTimeout(() => {\n        setShake(false);\n      }, 500);\n      \n      return () => clearTimeout(timeoutId);\n    }\n  }, [guessIncorrect]);\n\n  useEffect(() => {\n    if (shake) {\n      const timer = setTimeout(() => {\n        setShake(false);\n        setGuessIncorrect(false);\n      }, 500);\n      return () => clearTimeout(timer);\n    }\n  }, [shake]);\n\n\n  \n  useEffect(() => {\n    if (gameOver && remainingGroupsToReveal.length > 0) {\n      const timer = setTimeout(() => {\n        const [groupToReveal, ...restGroups] = remainingGroupsToReveal;\n      setGuessedGroups(prevGuessedGroups => [...prevGuessedGroups, groupToReveal]);\n      setTerms(terms => terms.filter(term => !groupToReveal.terms.includes(term)));\n      setRemainingGroupsToReveal(restGroups);\n    }, 1000);\n  \n      return () => clearTimeout(timer);\n    }\n  }, [remainingGroupsToReveal, gameOver, terms]);\n\n  useEffect(() => {\n    if (gameOver && readyToShowPopUp && remainingGroupsToReveal.length === 0) {\n      const timer = setTimeout(() => {\n        setShowResultsPopup(true);\n      }, 1700);\n      return () => clearTimeout(timer);      \n    }\n  }, [remainingGroupsToReveal, gameOver, readyToShowPopUp]);\n  \n  \n  const handleShuffle = () => {\n    const shuffledTermsArray = shuffleArray([...terms]);\n    setTerms(shuffledTermsArray);\n  };\n\n  const shuffleArray = (array) => {\n    let currentIndex = array.length,  randomIndex;\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n    return array;\n  };\n  const shuffledTermsArray = shuffleArray([...terms]);\n\n  useEffect(() => {\n    setTerms(shuffleArray([...initialTerms]));\n  }, []);\n  \n  const difficultyLevels = [\n    { name: 'Easy', color: '#4CAF50' },\n    { name: 'Medium', color: '#e5de00' },\n    { name: 'Hard', color: '#e27602' },\n    { name: 'Impossible', color: '#de0a26' },\n  ];\n  \n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      const now = new Date();\n      const nextPuzzleTimeET = new Date();\n      nextPuzzleTimeET.setHours(19, 0, 0, 0); // 7:00 PM ET\n      if (nextPuzzleTimeET < now) {\n        nextPuzzleTimeET.setDate(nextPuzzleTimeET.getDate() + 1);\n      }\n  \n      const timeUntilNextPuzzle = nextPuzzleTimeET - now;\n      const countdown = new Date(timeUntilNextPuzzle).toISOString().substr(11, 8);\n      setNextPuzzleCountdown(countdown);\n    }, 1000);\n  \n    return () => clearInterval(intervalId);\n  }, []);\n\n  \n  const renderResultsPopup = () => {\n  const message = userWon ? getVictoryMessage(mistakes) : \"Next Time!\";\n    \n    return (\n      <div className=\"results-popup\" onClick={() => setShowResultsPopup(false)}>\n        <div className=\"results-content\" onClick={(e) => e.stopPropagation()}>\n          <button className=\"close-button\" onClick={() => setShowResultsPopup(false)}>X</button>\n          <h2 className=\"message-header\">{message}</h2>\n          <p className=\"game-number\">OhConnections #{correctGroups[0].number}</p>\n          <div className=\"difficulty-container\">\n            {difficultyLevels.map(level => (\n              <div key={level.name} className=\"difficulty-level\">\n                <span className=\"difficulty-color\" style={{ backgroundColor: level.color }}></span>\n                <span className=\"difficulty-name\">{level.name}</span>\n              </div>\n            ))}\n          </div>\n          <div className=\"game-summary-grid\">\n          {moveHistory.map((colorSet, index) => (\n            <div key={index} className=\"summary-row\">\n              {colorSet.map((color, colorIndex) => (\n                <div key={colorIndex} className=\"summary-block\" style={{ backgroundColor: color }}></div>\n              ))}\n            </div>\n          ))}\n\n          </div>\n          <p className=\"next-puzzle-countdown\">NEXT BOARD IN: {nextPuzzleCountdown}</p>\n          <button className=\"copy-summary-button\" onClick={handleCopySummary}>Share Results</button>\n        </div>\n      </div>\n    );\n  };\n\n  const handleCopySummary = () => {\n    const summaryString = moveHistory.map(moveRow => \n      moveRow.map(color => {\n        switch (color) {\n          case correctGroups[0].color: return '🟩';\n          case correctGroups[1].color: return '🟨';\n          case correctGroups[2].color: return '🟧';\n          case correctGroups[3].color: return '🟥';\n          default: return '⬜️';\n        }\n      }).join('')\n    ).join('\\n');\n  \n    const legend = `\\n\\n🟩 = Easy\\n🟨 = Medium\\n🟧 = Hard\\n🟥 = Impossible`;\n\n    const completeSummary = `OhConnections\\nBoard #${correctGroups[0].number}\\n\\n${summaryString}${legend}\\n\\nNEXT PUZZLE IN: ${nextPuzzleCountdown}\\n\\nwww.ohconnections.com`;\n    \n    navigator.clipboard.writeText(completeSummary).then(() => {\n      setPopupMessage('Game summary copied to clipboard!');\n      setShowPopup(true);\n      setTimeout(() => setShowPopup(false), 2000);\n    }, (err) => {\n      console.error('Could not copy text: ', err);\n    });\n  };\n  \n  \n  const renderHowToPlayPopup = () => {\n    if (!showHowToPlay) return null;\n  \n    return (\n      <div className=\"how-to-play-popup\" onClick={() => setShowHowToPlay(false)}>\n        <div className=\"how-to-play-content\" onClick={e => e.stopPropagation()}>\n          <button className=\"close-button\" onClick={() => setShowHowToPlay(false)}>X</button>\n          <h1>How to Play</h1>\n          <p>Goal: Find groups of four MLB players that have something in common</p>\n          <div className=\"example-section\">\n            <p>Example:</p>\n            <div className=\"example-group\">\n              <p>CURRENT DODGERS PLAYERS</p>\n              <div className=\"player-images\">\n                <img src={freddieFreeman} alt=\"Freddie Freeman\" />\n                <img src={mookieBetts} alt=\"Mookie Betts\" />\n                <img src={shoheiOhtani} alt=\"Shohei Ohtani\" />\n                <img src={maxMuncy} alt=\"Max Muncy\" />\n            </div>\n            </div>\n            <div className=\"example-group\">\n              <p>PLAYERS BORN IN VENEZUELA</p>\n              <div className=\"player-images\">\n                <img src={joseAltuve} alt=\"Jose Altuve\" />\n                <img src={ronaldAcunaJr} alt=\"Ronald Acuña Jr\" />\n                <img src={miguelCabrera} alt=\"Miguel Cabrera\" />\n                <img src={salvadorPerez} alt=\"Salvador Perez\" />\n            </div>\n            </div>\n          </div>\n          <p>Select four similar players and tap 'Submit' to check if you are correct</p>\n          <p>You have four incorrect guesses before the game ends</p>\n          <p>Each group is represented by a color: </p>\n          <div className=\"difficulty-container\">\n          {difficultyLevels.map(level => (\n            <div key={level.name} className=\"difficulty-level\">\n              <span className=\"difficulty-color\" style={{ backgroundColor: level.color }}></span>\n              <span className=\"difficulty-name\">{level.name}</span>\n            </div>\n          ))}\n        </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"connections-game\">\n    <div className=\"header-container\">\n      <div className=\"button-placeholder\"></div>\n      <h1>Create four groups of four!</h1>\n      <button className=\"game-controls button how-to-play-button\" onClick={() => setShowHowToPlay(true)}>How to Play</button>\n    </div>\n    {showPopup && <div className=\"popup-message\">{popupMessage}</div>}\n    <div className=\"guessed-groups\">\n      {guessedGroups.map((group, index) => (\n        <div \n          key={index} \n          className=\"guessed-group-combined\"\n          style={{ backgroundColor: group.color }}\n        >\n          <div className=\"group-images\">\n            {group.terms.map((term, termIndex) => (\n              <div key={termIndex} className=\"player-image-container\">\n                <img src={playerImages[term]} alt={term} className=\"guessed-player-image\" />\n                <div className=\"player-name-overlay\">{term.toUpperCase()}</div>\n              </div>\n            ))}\n          </div>\n          <div className=\"group-description\">{group.description}</div>\n        </div>\n      ))}\n    </div>\n\n    <div className=\"terms-grid\" style={{ gridTemplateColumns: width > 0 ? 'repeat(4, 1fr)' : 'repeat(2, 1fr)' }}>\n      {terms.map((term, index) => {\n        let imgSrc = playerImages[term];\n          let isSelected = selectedTerms.includes(term);\n          let isAnimating = selectedTerms.indexOf(term) === animateIndex;\n          let shouldShake = isSelected && guessIncorrect;\n          let isCooldown = cooldown;\n\n    return (\n      <div key={index} \n           className={`term-block ${isSelected ? 'selected' : ''} ${isAnimating ? 'jump-animation' : ''} ${shouldShake ? 'shake-animation' : ''} ${isSubmitting ? 'no-hover' : ''} ${isCooldown ? 'no-hover' : ''}`} \n           onClick={() => handleTermClick(term)}\n           style={{ cursor: isSubmitting ? 'default' : 'pointer' }}>\n        <img src={imgSrc} className=\"term-image\" alt={term} />\n        <div className=\"text-overlay\">{term}</div>\n      </div>\n\n          );\n      })}\n    </div>\n    {!gameOver && (\n      <div className=\"mistakes-section\">\n        <div className=\"mistakes-indicator\">\n          <span className=\"mistakes-text\">Mistakes remaining: </span>\n          {Array.from({ length: mistakes }, (_, i) => (\n            <img key={i} src={baseballImg} alt=\"Baseball\" className=\"baseball-icon\" />\n          ))}\n        </div>\n      </div>\n    )}\n    {!gameOver ? (\n      <div className=\"game-controls\">\n        <button \n          onClick={handleShuffle}\n          disabled={isSubmitting || shake || cooldown}\n          style={{ opacity: (isSubmitting || shake || cooldown) ? 0.5 : 1 }}>\n          Shuffle\n        </button>\n\n        <button \n          onClick={() => setSelectedTerms([])}\n          disabled={isSubmitting || shake || cooldown || selectedTerms.length === 0}\n          style={{ opacity: (isSubmitting || shake || cooldown) ? 0.5 : 1 }}>\n          Deselect All\n        </button>\n\n        <button \n          onClick={handleSubmit}\n          disabled={isSubmitting || shake || cooldown || selectedTerms.length !== 4}\n          style={{ opacity: (isSubmitting || shake || cooldown) ? 0.5 : 1 }}>\n          Submit\n        </button>\n      </div>\n    ) : (\n      <div className=\"game-over-controls\">\n        <button className=\"game-button\" onClick={() => setShowResultsPopup(true)}>View Results</button>\n      </div>\n    )}\n    {showResultsPopup && renderResultsPopup()}\n    {renderHowToPlayPopup()}\n    <a href=\"https://docs.google.com/forms/d/e/1FAIpQLScf3nrR79wVz0ZjBy6LaH18Xi9gH6RfwU8GMd3-O-luSJjB-Q/viewform?usp=sf_link\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"suggestions-link\">Suggestions</a>\n  </div>\n);\n\n  \n};\n\nexport default ConnectionsPage;","/Users/michaelgoldfarb/Documents/OhConnections/src/pages/inputs/03-18-2024/ConnectionsPage.js",["98","99"],[],"import React, { useState, useEffect } from 'react';\nimport '../../ConnectionsPage.css';\nimport { playerImages, initialTerms, correctGroups } from './gameData.js';\nimport baseballImg from '../../../images/baseball.png';\nimport mookieBetts from '../../../images/examples/mookiebetts.png';\nimport maxMuncy from '../../../images/examples/maxmuncy.png';\nimport joseAltuve from '../../../images/examples/josealtuve.png';\nimport freddieFreeman from '../../../images/examples/freddiefreeman.png';\nimport shoheiOhtani from '../../../images/examples/shoheiohtani.png';\nimport ronaldAcunaJr from '../../../images/examples/ronaldacunajr.png';\nimport miguelCabrera from '../../../images/examples/miguelcabrera.png';\nimport salvadorPerez from '../../../images/examples/salvadorperez.png';\n\nconst ConnectionsPage = () => {\n  const gameSessionId = '03-18-2024';\n\n  const [cooldown, setCooldown] = useState(false);\n  const [guessIncorrect, setGuessIncorrect] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [width, height] = useWindowSize();\n  const [readyToShowPopUp, setReadyToShowPopUp] = useState(false);\n  const [nextPuzzleCountdown, setNextPuzzleCountdown] = useState('');\n  const [showHowToPlay, setShowHowToPlay] = useState(false);\n  const [userWon, setUserWon] = useState(false);\n  const [animateIndex, setAnimateIndex] = useState(null);\n  const [shake, setShake] = useState(false);\n  // const [selectedTerms, setSelectedTerms] = useState([]);    \n  // const [moveHistory, setMoveHistory] = useState([]);\n  // const [gameOver, setGameOver] = useState(false);\n  // const [showResultsPopup, setShowResultsPopup] = useState(false);\n  // const [remainingGroupsToReveal, setRemainingGroupsToReveal] = useState([]);\n  // const [mistakes, setMistakes] = useState(4);\n  // const [submittedSets, setSubmittedSets] = useState([]);\n  // const [guessedGroups, setGuessedGroups] = useState([]);\n  // const [terms, setTerms] = useState(initialTerms);\n  const [gameOver, setGameOver] = useState(() => {\n    const saved = localStorage.getItem(`gameOver-${gameSessionId}`);\n    return saved ? JSON.parse(saved) : false;\n  });\n  \n  const [showResultsPopup, setShowResultsPopup] = useState(() => {\n    const saved = localStorage.getItem(`showResultsPopup-${gameSessionId}`);\n    return saved ? JSON.parse(saved) : false;\n  });\n  \n  const [moveHistory, setMoveHistory] = useState(() => {\n    const saved = localStorage.getItem(`moveHistory-${gameSessionId}`);\n    return saved ? JSON.parse(saved) : [];\n  });\n  \n  const [remainingGroupsToReveal, setRemainingGroupsToReveal] = useState(() => {\n    const savedData = localStorage.getItem(`remainingGroupsToReveal-${gameSessionId}`);\n    return savedData ? JSON.parse(savedData) : [];\n  });\n  \n  const [selectedTerms, setSelectedTerms] = useState(() => {\n    const savedData = localStorage.getItem(`selectedTerms-${gameSessionId}`);\n    return savedData ? JSON.parse(savedData) : [];\n  });\n  \n  const [terms, setTerms] = useState(() => {\n    const savedTerms = localStorage.getItem(`terms-${gameSessionId}`);\n    return savedTerms ? JSON.parse(savedTerms) : initialTerms;\n  });\n  \n  const [guessedGroups, setGuessedGroups] = useState(() => {\n    const savedGroups = localStorage.getItem(`guessedGroups-${gameSessionId}`);\n    return savedGroups ? JSON.parse(savedGroups) : [];\n  });\n  \n  const [mistakes, setMistakes] = useState(() => {\n    const savedMistakes = localStorage.getItem(`mistakes-${gameSessionId}`);\n    return savedMistakes !== null ? parseInt(savedMistakes, 10) : 4;\n  });\n  \n  const [submittedSets, setSubmittedSets] = useState(() => {\n    const savedSets = localStorage.getItem(`submittedSets-${gameSessionId}`);\n    return savedSets ? JSON.parse(savedSets) : [];\n  });\n  \n  const [popupMessage, setPopupMessage] = useState(\"\");\n  const [showPopup, setShowPopup] = useState(false);\n\n  useEffect(() => {\n    localStorage.setItem(`terms-${gameSessionId}`, JSON.stringify(terms));\n  }, [terms, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`mistakes-${gameSessionId}`, mistakes.toString());\n  }, [mistakes, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`submittedSets-${gameSessionId}`, JSON.stringify(submittedSets));\n  }, [submittedSets, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`guessedGroups-${gameSessionId}`, JSON.stringify(guessedGroups));\n  }, [guessedGroups, gameSessionId]);\n\n  useEffect(() => {\n    localStorage.setItem(`remainingGroupsToReveal-${gameSessionId}`, JSON.stringify(remainingGroupsToReveal));\n  }, [remainingGroupsToReveal, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`selectedTerms-${gameSessionId}`, JSON.stringify(selectedTerms));\n  }, [selectedTerms, gameSessionId]);  \n\n  useEffect(() => {\n    localStorage.setItem(`gameOver-${gameSessionId}`, JSON.stringify(gameOver));\n  }, [gameOver, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`showResultsPopup-${gameSessionId}`, JSON.stringify(showResultsPopup));\n  }, [showResultsPopup, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`moveHistory-${gameSessionId}`, JSON.stringify(moveHistory));\n  }, [moveHistory, gameSessionId]);\n\n  useEffect(() => {\n    const updatedTerms = initialTerms.filter(term => \n      !guessedGroups.some(group => group.terms.includes(term))\n    );\n    \n    setTerms(updatedTerms);\n    localStorage.setItem(`terms-${gameSessionId}`, JSON.stringify(updatedTerms));\n  }, [guessedGroups, gameSessionId]);\n  \n\n  useEffect(() => {\n    const initTerms = shuffleArray(JSON.parse(localStorage.getItem(`terms-${gameSessionId}`)) || initialTerms);\n    const initGuessedGroups = JSON.parse(localStorage.getItem(`guessedGroups-${gameSessionId}`)) || [];   \n    setTerms(initTerms);\n    setGuessedGroups(initGuessedGroups);   \n  }, []);\n  \n  \n\n  const getVictoryMessage = (mistakesLeft) => {\n    switch(mistakesLeft) {\n      case 4: return \"Perfect!\";\n      case 3: return \"Great Job!\";\n      case 2: return \"Solid!\";\n      case 1: return \"Phew!\";\n      default: return \"Good Job!\";\n    }\n  };\n  \n  const handleTermClick = (term) => {\n    if (gameOver) return;\n    if (isSubmitting || gameOver || cooldown) return;\n    if (selectedTerms.includes(term)) {\n      setSelectedTerms(selectedTerms.filter(t => t !== term));\n      setShowPopup(false);\n    } else {\n      if (selectedTerms.length < 4) {\n        setSelectedTerms([...selectedTerms, term]);\n        setShowPopup(false);\n      } else {\n        setPopupMessage(\"You cannot select more than 4 players.\");\n        setShowPopup(true);\n        setTimeout(() => setShowPopup(false), 2000);\n      }\n    }\n  };\n\n  const handleSubmit = () => {\n    if (gameOver || mistakes <= 0 || selectedTerms.length !== 4 || cooldown) {\n        return;\n    }\n\n    const currentSetSorted = [...selectedTerms].sort();\n    const currentSetString = currentSetSorted.join(',');\n    \n    if (submittedSets.includes(currentSetString)) {\n      setPopupMessage(\"You cannot guess the same 4 players twice.\");\n      setShowPopup(true);\n      setTimeout(() => {\n          setShowPopup(false);\n          setIsSubmitting(false);\n      }, 2000);\n      return;\n    }\n  \n    setIsSubmitting(true);\n\n  setTimeout(() => {\n    const oneAway = correctGroups.some(group => {\n        const matchingTerms = group.terms.filter(term => currentSetSorted.includes(term));\n        return matchingTerms.length === 3 && group.terms.sort().join(',') !== currentSetString;\n    });\n\n    const guessColors = selectedTerms.map(term => {\n        const group = correctGroups.find(group => group.terms.includes(term));\n        return group ? group.color : '#FFFFFF';\n    });\n\n    setMoveHistory(prevHistory => [...prevHistory, guessColors]);\n        \n    const foundGroup = correctGroups.find(group => group.terms.sort().join(',') === currentSetString);\n\n    if (!foundGroup) {\n      setGuessIncorrect(true);\n      setShake(true);\n\n      setCooldown(true);\n        setTimeout(() => {\n          setCooldown(false);\n        }, 1200);\n\n      setTimeout(() => {\n        setShake(false);\n\n        if (oneAway && mistakes > 1) {\n          setPopupMessage(\"One Away!\");\n          setShowPopup(true);\n          setTimeout(() => setShowPopup(false), 2000);\n        }\n            \n        setSubmittedSets([...submittedSets, currentSetString]);\n        setMistakes(mistakes - 1);\n\n        if (mistakes <= 1) {\n            setGameOver(true);\n            setUserWon(false);\n            setPopupMessage(\"Nice try!\");\n            setShowPopup(true);\n            setTimeout(() => {\n                setShowPopup(false);\n                setRemainingGroupsToReveal(correctGroups.filter(group => !guessedGroups.some(guessedGroup => guessedGroup.description === group.description)));\n                setReadyToShowPopUp(true);\n                setSelectedTerms([]);\n                setMistakes(0);\n            }, 2000);\n        }\n        setGuessIncorrect(false);\n      }, 850);\n        } else {\n            const updatedTerms = terms.filter(term => !foundGroup.terms.includes(term));\n            const updatedGuessedGroups = [...guessedGroups, { ...foundGroup, terms: selectedTerms }];            \n            setTerms(updatedTerms);\n            setGuessedGroups(updatedGuessedGroups);\n            localStorage.setItem(`terms-${gameSessionId}`, JSON.stringify(updatedTerms));\n            localStorage.setItem(`guessedGroups-${gameSessionId}`, JSON.stringify(updatedGuessedGroups));\n            setSelectedTerms([]);\n\n          if (guessedGroups.length + 1 === correctGroups.length) {\n            setGameOver(true);\n            setUserWon(true);\n            setPopupMessage(getVictoryMessage(mistakes));\n            setShowPopup(true);\n            setTimeout(() => {\n                setShowPopup(false);\n                setShowResultsPopup(true);\n            }, 1000);\n          }\n        }\n      setIsSubmitting(false);\n    }, 1700);\n  };\n\n  \n  \n\n  function useWindowSize() {\n    const [size, setSize] = useState([window.innerWidth, window.innerHeight]);\n  \n    useEffect(() => {\n      const handleResize = () => {\n        setSize([window.innerWidth, window.innerHeight]);\n      };\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }, []);\n  \n    return size;\n  }\n\n  useEffect(() => {\n    if (selectedTerms.length > 0 && isSubmitting) {\n      selectedTerms.forEach((term, index) => {\n        setTimeout(() => {\n          setAnimateIndex(index);\n        }, index * 300);\n      });\n  \n      const lastAnimationDelay = selectedTerms.length * 500;\n      const timeoutId = setTimeout(() => {\n        setAnimateIndex(null);\n        setIsSubmitting(false);\n      }, lastAnimationDelay);\n  \n      return () => clearTimeout(timeoutId);\n    }\n  }, [isSubmitting, selectedTerms]);\n  \n  \n  useEffect(() => {\n    if (animateIndex !== null) {\n      const timeoutId = setTimeout(() => {\n        setAnimateIndex(null);\n      }, 500);\n  \n      return () => clearTimeout(timeoutId);\n    }\n  }, [animateIndex]);\n\n  useEffect(() => {\n    if (guessIncorrect) {\n      const timeoutId = setTimeout(() => {\n        setShake(false);\n      }, 500);\n      \n      return () => clearTimeout(timeoutId);\n    }\n  }, [guessIncorrect]);\n\n  useEffect(() => {\n    if (shake) {\n      const timer = setTimeout(() => {\n        setShake(false);\n        setGuessIncorrect(false);\n      }, 500);\n      return () => clearTimeout(timer);\n    }\n  }, [shake]);\n\n\n  \n  useEffect(() => {\n    if (gameOver && remainingGroupsToReveal.length > 0) {\n      const timer = setTimeout(() => {\n        const [groupToReveal, ...restGroups] = remainingGroupsToReveal;\n      setGuessedGroups(prevGuessedGroups => [...prevGuessedGroups, groupToReveal]);\n      setTerms(terms => terms.filter(term => !groupToReveal.terms.includes(term)));\n      setRemainingGroupsToReveal(restGroups);\n    }, 1000);\n  \n      return () => clearTimeout(timer);\n    }\n  }, [remainingGroupsToReveal, gameOver, terms]);\n\n  useEffect(() => {\n    if (gameOver && readyToShowPopUp && remainingGroupsToReveal.length === 0) {\n      const timer = setTimeout(() => {\n        setShowResultsPopup(true);\n      }, 1700);\n      return () => clearTimeout(timer);      \n    }\n  }, [remainingGroupsToReveal, gameOver, readyToShowPopUp]);\n  \n  \n  const handleShuffle = () => {\n    const shuffledTermsArray = shuffleArray([...terms]);\n    setTerms(shuffledTermsArray);\n  };\n\n  const shuffleArray = (array) => {\n    let currentIndex = array.length,  randomIndex;\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n    return array;\n  };\n  const shuffledTermsArray = shuffleArray([...terms]);\n\n  useEffect(() => {\n    setTerms(shuffleArray([...initialTerms]));\n  }, []);\n  \n  const difficultyLevels = [\n    { name: 'Easy', color: '#4CAF50' },\n    { name: 'Medium', color: '#e5de00' },\n    { name: 'Hard', color: '#e27602' },\n    { name: 'Impossible', color: '#de0a26' },\n  ];\n  \n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      const now = new Date();\n      const nextPuzzleTimeET = new Date();\n      nextPuzzleTimeET.setHours(19, 0, 0, 0); // 7:00 PM ET\n      if (nextPuzzleTimeET < now) {\n        nextPuzzleTimeET.setDate(nextPuzzleTimeET.getDate() + 1);\n      }\n  \n      const timeUntilNextPuzzle = nextPuzzleTimeET - now;\n      const countdown = new Date(timeUntilNextPuzzle).toISOString().substr(11, 8);\n      setNextPuzzleCountdown(countdown);\n    }, 1000);\n  \n    return () => clearInterval(intervalId);\n  }, []);\n\n  \n  const renderResultsPopup = () => {\n  const message = userWon ? getVictoryMessage(mistakes) : \"Next Time!\";\n    \n    return (\n      <div className=\"results-popup\" onClick={() => setShowResultsPopup(false)}>\n        <div className=\"results-content\" onClick={(e) => e.stopPropagation()}>\n          <button className=\"close-button\" onClick={() => setShowResultsPopup(false)}>X</button>\n          <h2 className=\"message-header\">{message}</h2>\n          <p className=\"game-number\">OhConnections #{correctGroups[0].number}</p>\n          <div className=\"difficulty-container\">\n            {difficultyLevels.map(level => (\n              <div key={level.name} className=\"difficulty-level\">\n                <span className=\"difficulty-color\" style={{ backgroundColor: level.color }}></span>\n                <span className=\"difficulty-name\">{level.name}</span>\n              </div>\n            ))}\n          </div>\n          <div className=\"game-summary-grid\">\n          {moveHistory.map((colorSet, index) => (\n            <div key={index} className=\"summary-row\">\n              {colorSet.map((color, colorIndex) => (\n                <div key={colorIndex} className=\"summary-block\" style={{ backgroundColor: color }}></div>\n              ))}\n            </div>\n          ))}\n\n          </div>\n          <p className=\"next-puzzle-countdown\">NEXT BOARD IN: {nextPuzzleCountdown}</p>\n          <button className=\"copy-summary-button\" onClick={handleCopySummary}>Share Results</button>\n        </div>\n      </div>\n    );\n  };\n\n  const handleCopySummary = () => {\n    const summaryString = moveHistory.map(moveRow => \n      moveRow.map(color => {\n        switch (color) {\n          case correctGroups[0].color: return '🟩';\n          case correctGroups[1].color: return '🟨';\n          case correctGroups[2].color: return '🟧';\n          case correctGroups[3].color: return '🟥';\n          default: return '⬜️';\n        }\n      }).join('')\n    ).join('\\n');\n  \n    const legend = `\\n\\n🟩 = Easy\\n🟨 = Medium\\n🟧 = Hard\\n🟥 = Impossible`;\n\n    const completeSummary = `OhConnections\\nBoard #${correctGroups[0].number}\\n\\n${summaryString}${legend}\\n\\nNEXT PUZZLE IN: ${nextPuzzleCountdown}\\n\\nwww.ohconnections.com`;\n    \n    navigator.clipboard.writeText(completeSummary).then(() => {\n      setPopupMessage('Game summary copied to clipboard!');\n      setShowPopup(true);\n      setTimeout(() => setShowPopup(false), 2000);\n    }, (err) => {\n      console.error('Could not copy text: ', err);\n    });\n  };\n  \n  \n  const renderHowToPlayPopup = () => {\n    if (!showHowToPlay) return null;\n  \n    return (\n      <div className=\"how-to-play-popup\" onClick={() => setShowHowToPlay(false)}>\n        <div className=\"how-to-play-content\" onClick={e => e.stopPropagation()}>\n          <button className=\"close-button\" onClick={() => setShowHowToPlay(false)}>X</button>\n          <h1>How to Play</h1>\n          <p>Goal: Find groups of four MLB players that have something in common</p>\n          <div className=\"example-section\">\n            <p>Example:</p>\n            <div className=\"example-group\">\n              <p>CURRENT DODGERS PLAYERS</p>\n              <div className=\"player-images\">\n                <img src={freddieFreeman} alt=\"Freddie Freeman\" />\n                <img src={mookieBetts} alt=\"Mookie Betts\" />\n                <img src={shoheiOhtani} alt=\"Shohei Ohtani\" />\n                <img src={maxMuncy} alt=\"Max Muncy\" />\n            </div>\n            </div>\n            <div className=\"example-group\">\n              <p>PLAYERS BORN IN VENEZUELA</p>\n              <div className=\"player-images\">\n                <img src={joseAltuve} alt=\"Jose Altuve\" />\n                <img src={ronaldAcunaJr} alt=\"Ronald Acuña Jr\" />\n                <img src={miguelCabrera} alt=\"Miguel Cabrera\" />\n                <img src={salvadorPerez} alt=\"Salvador Perez\" />\n            </div>\n            </div>\n          </div>\n          <p>Select four similar players and tap 'Submit' to check if you are correct</p>\n          <p>You have four incorrect guesses before the game ends</p>\n          <p>Each group is represented by a color: </p>\n          <div className=\"difficulty-container\">\n          {difficultyLevels.map(level => (\n            <div key={level.name} className=\"difficulty-level\">\n              <span className=\"difficulty-color\" style={{ backgroundColor: level.color }}></span>\n              <span className=\"difficulty-name\">{level.name}</span>\n            </div>\n          ))}\n        </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"connections-game\">\n    <div className=\"header-container\">\n      <div className=\"button-placeholder\"></div>\n      <h1>Create four groups of four!</h1>\n      <button className=\"game-controls button how-to-play-button\" onClick={() => setShowHowToPlay(true)}>How to Play</button>\n    </div>\n    {showPopup && <div className=\"popup-message\">{popupMessage}</div>}\n    <div className=\"guessed-groups\">\n      {guessedGroups.map((group, index) => (\n        <div \n          key={index} \n          className=\"guessed-group-combined\"\n          style={{ backgroundColor: group.color }}\n        >\n          <div className=\"group-images\">\n            {group.terms.map((term, termIndex) => (\n              <div key={termIndex} className=\"player-image-container\">\n                <img src={playerImages[term]} alt={term} className=\"guessed-player-image\" />\n                <div className=\"player-name-overlay\">{term.toUpperCase()}</div>\n              </div>\n            ))}\n          </div>\n          <div className=\"group-description\">{group.description}</div>\n        </div>\n      ))}\n    </div>\n\n    <div className=\"terms-grid\" style={{ gridTemplateColumns: width > 0 ? 'repeat(4, 1fr)' : 'repeat(2, 1fr)' }}>\n      {terms.map((term, index) => {\n        let imgSrc = playerImages[term];\n          let isSelected = selectedTerms.includes(term);\n          let isAnimating = selectedTerms.indexOf(term) === animateIndex;\n          let shouldShake = isSelected && guessIncorrect;\n          let isCooldown = cooldown;\n\n    return (\n      <div key={index} \n           className={`term-block ${isSelected ? 'selected' : ''} ${isAnimating ? 'jump-animation' : ''} ${shouldShake ? 'shake-animation' : ''} ${isSubmitting ? 'no-hover' : ''} ${isCooldown ? 'no-hover' : ''}`} \n           onClick={() => handleTermClick(term)}\n           style={{ cursor: isSubmitting ? 'default' : 'pointer' }}>\n        <img src={imgSrc} className=\"term-image\" alt={term} />\n        <div className=\"text-overlay\">{term}</div>\n      </div>\n\n          );\n      })}\n    </div>\n    {!gameOver && (\n      <div className=\"mistakes-section\">\n        <div className=\"mistakes-indicator\">\n          <span className=\"mistakes-text\">Mistakes remaining: </span>\n          {Array.from({ length: mistakes }, (_, i) => (\n            <img key={i} src={baseballImg} alt=\"Baseball\" className=\"baseball-icon\" />\n          ))}\n        </div>\n      </div>\n    )}\n    {!gameOver ? (\n      <div className=\"game-controls\">\n        <button \n          onClick={handleShuffle}\n          disabled={isSubmitting || shake || cooldown}\n          style={{ opacity: (isSubmitting || shake || cooldown) ? 0.5 : 1 }}>\n          Shuffle\n        </button>\n\n        <button \n          onClick={() => setSelectedTerms([])}\n          disabled={isSubmitting || shake || cooldown || selectedTerms.length === 0}\n          style={{ opacity: (isSubmitting || shake || cooldown) ? 0.5 : 1 }}>\n          Deselect All\n        </button>\n\n        <button \n          onClick={handleSubmit}\n          disabled={isSubmitting || shake || cooldown || selectedTerms.length !== 4}\n          style={{ opacity: (isSubmitting || shake || cooldown) ? 0.5 : 1 }}>\n          Submit\n        </button>\n      </div>\n    ) : (\n      <div className=\"game-over-controls\">\n        <button className=\"game-button\" onClick={() => setShowResultsPopup(true)}>View Results</button>\n      </div>\n    )}\n    {showResultsPopup && renderResultsPopup()}\n    {renderHowToPlayPopup()}\n    <a href=\"https://docs.google.com/forms/d/e/1FAIpQLScf3nrR79wVz0ZjBy6LaH18Xi9gH6RfwU8GMd3-O-luSJjB-Q/viewform?usp=sf_link\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"suggestions-link\">Suggestions</a>\n  </div>\n);\n\n  \n};\n\nexport default ConnectionsPage;","/Users/michaelgoldfarb/Documents/OhConnections/src/pages/inputs/03-17-2024/ConnectionsPage.js",["100","101"],[],"import React, { useState, useEffect } from 'react';\nimport '../../ConnectionsPage.css';\nimport { playerImages, initialTerms, correctGroups } from './gameData.js';\nimport baseballImg from '../../../images/baseball.png';\nimport mookieBetts from '../../../images/examples/mookiebetts.png';\nimport maxMuncy from '../../../images/examples/maxmuncy.png';\nimport joseAltuve from '../../../images/examples/josealtuve.png';\nimport freddieFreeman from '../../../images/examples/freddiefreeman.png';\nimport shoheiOhtani from '../../../images/examples/shoheiohtani.png';\nimport ronaldAcunaJr from '../../../images/examples/ronaldacunajr.png';\nimport miguelCabrera from '../../../images/examples/miguelcabrera.png';\nimport salvadorPerez from '../../../images/examples/salvadorperez.png';\n\nconst ConnectionsPage = () => {\n  const gameSessionId = '03-17-2024';\n\n  const [cooldown, setCooldown] = useState(false);\n  const [guessIncorrect, setGuessIncorrect] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [width, height] = useWindowSize();\n  const [readyToShowPopUp, setReadyToShowPopUp] = useState(false);\n  const [nextPuzzleCountdown, setNextPuzzleCountdown] = useState('');\n  const [showHowToPlay, setShowHowToPlay] = useState(false);\n  const [userWon, setUserWon] = useState(false);\n  const [animateIndex, setAnimateIndex] = useState(null);\n  const [shake, setShake] = useState(false);\n  // const [selectedTerms, setSelectedTerms] = useState([]);    \n  // const [moveHistory, setMoveHistory] = useState([]);\n  // const [gameOver, setGameOver] = useState(false);\n  // const [showResultsPopup, setShowResultsPopup] = useState(false);\n  // const [remainingGroupsToReveal, setRemainingGroupsToReveal] = useState([]);\n  // const [mistakes, setMistakes] = useState(4);\n  // const [submittedSets, setSubmittedSets] = useState([]);\n  // const [guessedGroups, setGuessedGroups] = useState([]);\n  // const [terms, setTerms] = useState(initialTerms);\n  const [gameOver, setGameOver] = useState(() => {\n    const saved = localStorage.getItem(`gameOver-${gameSessionId}`);\n    return saved ? JSON.parse(saved) : false;\n  });\n  \n  const [showResultsPopup, setShowResultsPopup] = useState(() => {\n    const saved = localStorage.getItem(`showResultsPopup-${gameSessionId}`);\n    return saved ? JSON.parse(saved) : false;\n  });\n  \n  const [moveHistory, setMoveHistory] = useState(() => {\n    const saved = localStorage.getItem(`moveHistory-${gameSessionId}`);\n    return saved ? JSON.parse(saved) : [];\n  });\n  \n  const [remainingGroupsToReveal, setRemainingGroupsToReveal] = useState(() => {\n    const savedData = localStorage.getItem(`remainingGroupsToReveal-${gameSessionId}`);\n    return savedData ? JSON.parse(savedData) : [];\n  });\n  \n  const [selectedTerms, setSelectedTerms] = useState(() => {\n    const savedData = localStorage.getItem(`selectedTerms-${gameSessionId}`);\n    return savedData ? JSON.parse(savedData) : [];\n  });\n  \n  const [terms, setTerms] = useState(() => {\n    const savedTerms = localStorage.getItem(`terms-${gameSessionId}`);\n    return savedTerms ? JSON.parse(savedTerms) : initialTerms;\n  });\n  \n  const [guessedGroups, setGuessedGroups] = useState(() => {\n    const savedGroups = localStorage.getItem(`guessedGroups-${gameSessionId}`);\n    return savedGroups ? JSON.parse(savedGroups) : [];\n  });\n  \n  const [mistakes, setMistakes] = useState(() => {\n    const savedMistakes = localStorage.getItem(`mistakes-${gameSessionId}`);\n    return savedMistakes !== null ? parseInt(savedMistakes, 10) : 4;\n  });\n  \n  const [submittedSets, setSubmittedSets] = useState(() => {\n    const savedSets = localStorage.getItem(`submittedSets-${gameSessionId}`);\n    return savedSets ? JSON.parse(savedSets) : [];\n  });\n  \n  const [popupMessage, setPopupMessage] = useState(\"\");\n  const [showPopup, setShowPopup] = useState(false);\n\n  useEffect(() => {\n    localStorage.setItem(`terms-${gameSessionId}`, JSON.stringify(terms));\n  }, [terms, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`mistakes-${gameSessionId}`, mistakes.toString());\n  }, [mistakes, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`submittedSets-${gameSessionId}`, JSON.stringify(submittedSets));\n  }, [submittedSets, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`guessedGroups-${gameSessionId}`, JSON.stringify(guessedGroups));\n  }, [guessedGroups, gameSessionId]);\n\n  useEffect(() => {\n    localStorage.setItem(`remainingGroupsToReveal-${gameSessionId}`, JSON.stringify(remainingGroupsToReveal));\n  }, [remainingGroupsToReveal, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`selectedTerms-${gameSessionId}`, JSON.stringify(selectedTerms));\n  }, [selectedTerms, gameSessionId]);  \n\n  useEffect(() => {\n    localStorage.setItem(`gameOver-${gameSessionId}`, JSON.stringify(gameOver));\n  }, [gameOver, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`showResultsPopup-${gameSessionId}`, JSON.stringify(showResultsPopup));\n  }, [showResultsPopup, gameSessionId]);\n  \n  useEffect(() => {\n    localStorage.setItem(`moveHistory-${gameSessionId}`, JSON.stringify(moveHistory));\n  }, [moveHistory, gameSessionId]);\n\n  useEffect(() => {\n    const updatedTerms = initialTerms.filter(term => \n      !guessedGroups.some(group => group.terms.includes(term))\n    );\n    \n    setTerms(updatedTerms);\n    localStorage.setItem(`terms-${gameSessionId}`, JSON.stringify(updatedTerms));\n  }, [guessedGroups, gameSessionId]);\n  \n\n  useEffect(() => {\n    const initTerms = shuffleArray(JSON.parse(localStorage.getItem(`terms-${gameSessionId}`)) || initialTerms);\n    const initGuessedGroups = JSON.parse(localStorage.getItem(`guessedGroups-${gameSessionId}`)) || [];   \n    setTerms(initTerms);\n    setGuessedGroups(initGuessedGroups);   \n  }, []);\n  \n  \n\n  const getVictoryMessage = (mistakesLeft) => {\n    switch(mistakesLeft) {\n      case 4: return \"Perfect!\";\n      case 3: return \"Great Job!\";\n      case 2: return \"Solid!\";\n      case 1: return \"Phew!\";\n      default: return \"Good Job!\";\n    }\n  };\n  \n  const handleTermClick = (term) => {\n    if (gameOver) return;\n    if (isSubmitting || gameOver || cooldown) return;\n    if (selectedTerms.includes(term)) {\n      setSelectedTerms(selectedTerms.filter(t => t !== term));\n      setShowPopup(false);\n    } else {\n      if (selectedTerms.length < 4) {\n        setSelectedTerms([...selectedTerms, term]);\n        setShowPopup(false);\n      } else {\n        setPopupMessage(\"You cannot select more than 4 players.\");\n        setShowPopup(true);\n        setTimeout(() => setShowPopup(false), 2000);\n      }\n    }\n  };\n\n  const handleSubmit = () => {\n    if (gameOver || mistakes <= 0 || selectedTerms.length !== 4 || cooldown) {\n        return;\n    }\n\n    const currentSetSorted = [...selectedTerms].sort();\n    const currentSetString = currentSetSorted.join(',');\n    \n    if (submittedSets.includes(currentSetString)) {\n      setPopupMessage(\"You cannot guess the same 4 players twice.\");\n      setShowPopup(true);\n      setTimeout(() => {\n          setShowPopup(false);\n          setIsSubmitting(false);\n      }, 2000);\n      return;\n    }\n  \n    setIsSubmitting(true);\n\n  setTimeout(() => {\n    const oneAway = correctGroups.some(group => {\n        const matchingTerms = group.terms.filter(term => currentSetSorted.includes(term));\n        return matchingTerms.length === 3 && group.terms.sort().join(',') !== currentSetString;\n    });\n\n    const guessColors = selectedTerms.map(term => {\n        const group = correctGroups.find(group => group.terms.includes(term));\n        return group ? group.color : '#FFFFFF';\n    });\n\n    setMoveHistory(prevHistory => [...prevHistory, guessColors]);\n        \n    const foundGroup = correctGroups.find(group => group.terms.sort().join(',') === currentSetString);\n\n    if (!foundGroup) {\n      setGuessIncorrect(true);\n      setShake(true);\n\n      setCooldown(true);\n        setTimeout(() => {\n          setCooldown(false);\n        }, 1200);\n\n      setTimeout(() => {\n        setShake(false);\n\n        if (oneAway && mistakes > 1) {\n          setPopupMessage(\"One Away!\");\n          setShowPopup(true);\n          setTimeout(() => setShowPopup(false), 2000);\n        }\n            \n        setSubmittedSets([...submittedSets, currentSetString]);\n        setMistakes(mistakes - 1);\n\n        if (mistakes <= 1) {\n            setGameOver(true);\n            setUserWon(false);\n            setPopupMessage(\"Nice try!\");\n            setShowPopup(true);\n            setTimeout(() => {\n                setShowPopup(false);\n                setRemainingGroupsToReveal(correctGroups.filter(group => !guessedGroups.some(guessedGroup => guessedGroup.description === group.description)));\n                setReadyToShowPopUp(true);\n                setSelectedTerms([]);\n                setMistakes(0);\n            }, 2000);\n        }\n        setGuessIncorrect(false);\n      }, 850);\n        } else {\n            const updatedTerms = terms.filter(term => !foundGroup.terms.includes(term));\n            const updatedGuessedGroups = [...guessedGroups, { ...foundGroup, terms: selectedTerms }];            \n            setTerms(updatedTerms);\n            setGuessedGroups(updatedGuessedGroups);\n            localStorage.setItem(`terms-${gameSessionId}`, JSON.stringify(updatedTerms));\n            localStorage.setItem(`guessedGroups-${gameSessionId}`, JSON.stringify(updatedGuessedGroups));\n            setSelectedTerms([]);\n\n          if (guessedGroups.length + 1 === correctGroups.length) {\n            setGameOver(true);\n            setUserWon(true);\n            setPopupMessage(getVictoryMessage(mistakes));\n            setShowPopup(true);\n            setTimeout(() => {\n                setShowPopup(false);\n                setShowResultsPopup(true);\n            }, 1000);\n          }\n        }\n      setIsSubmitting(false);\n    }, 1700);\n  };\n\n  \n  \n\n  function useWindowSize() {\n    const [size, setSize] = useState([window.innerWidth, window.innerHeight]);\n  \n    useEffect(() => {\n      const handleResize = () => {\n        setSize([window.innerWidth, window.innerHeight]);\n      };\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }, []);\n  \n    return size;\n  }\n\n  useEffect(() => {\n    if (selectedTerms.length > 0 && isSubmitting) {\n      selectedTerms.forEach((term, index) => {\n        setTimeout(() => {\n          setAnimateIndex(index);\n        }, index * 300);\n      });\n  \n      const lastAnimationDelay = selectedTerms.length * 500;\n      const timeoutId = setTimeout(() => {\n        setAnimateIndex(null);\n        setIsSubmitting(false);\n      }, lastAnimationDelay);\n  \n      return () => clearTimeout(timeoutId);\n    }\n  }, [isSubmitting, selectedTerms]);\n  \n  \n  useEffect(() => {\n    if (animateIndex !== null) {\n      const timeoutId = setTimeout(() => {\n        setAnimateIndex(null);\n      }, 500);\n  \n      return () => clearTimeout(timeoutId);\n    }\n  }, [animateIndex]);\n\n  useEffect(() => {\n    if (guessIncorrect) {\n      const timeoutId = setTimeout(() => {\n        setShake(false);\n      }, 500);\n      \n      return () => clearTimeout(timeoutId);\n    }\n  }, [guessIncorrect]);\n\n  useEffect(() => {\n    if (shake) {\n      const timer = setTimeout(() => {\n        setShake(false);\n        setGuessIncorrect(false);\n      }, 500);\n      return () => clearTimeout(timer);\n    }\n  }, [shake]);\n\n\n  \n  useEffect(() => {\n    if (gameOver && remainingGroupsToReveal.length > 0) {\n      const timer = setTimeout(() => {\n        const [groupToReveal, ...restGroups] = remainingGroupsToReveal;\n      setGuessedGroups(prevGuessedGroups => [...prevGuessedGroups, groupToReveal]);\n      setTerms(terms => terms.filter(term => !groupToReveal.terms.includes(term)));\n      setRemainingGroupsToReveal(restGroups);\n    }, 1000);\n  \n      return () => clearTimeout(timer);\n    }\n  }, [remainingGroupsToReveal, gameOver, terms]);\n\n  useEffect(() => {\n    if (gameOver && readyToShowPopUp && remainingGroupsToReveal.length === 0) {\n      const timer = setTimeout(() => {\n        setShowResultsPopup(true);\n      }, 1700);\n      return () => clearTimeout(timer);      \n    }\n  }, [remainingGroupsToReveal, gameOver, readyToShowPopUp]);\n  \n  \n  const handleShuffle = () => {\n    const shuffledTermsArray = shuffleArray([...terms]);\n    setTerms(shuffledTermsArray);\n  };\n\n  const shuffleArray = (array) => {\n    let currentIndex = array.length,  randomIndex;\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n    return array;\n  };\n  const shuffledTermsArray = shuffleArray([...terms]);\n\n  useEffect(() => {\n    setTerms(shuffleArray([...initialTerms]));\n  }, []);\n  \n  const difficultyLevels = [\n    { name: 'Easy', color: '#4CAF50' },\n    { name: 'Medium', color: '#e5de00' },\n    { name: 'Hard', color: '#e27602' },\n    { name: 'Impossible', color: '#de0a26' },\n  ];\n  \n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      const now = new Date();\n      const nextPuzzleTimeET = new Date();\n      nextPuzzleTimeET.setHours(19, 0, 0, 0); // 7:00 PM ET\n      if (nextPuzzleTimeET < now) {\n        nextPuzzleTimeET.setDate(nextPuzzleTimeET.getDate() + 1);\n      }\n  \n      const timeUntilNextPuzzle = nextPuzzleTimeET - now;\n      const countdown = new Date(timeUntilNextPuzzle).toISOString().substr(11, 8);\n      setNextPuzzleCountdown(countdown);\n    }, 1000);\n  \n    return () => clearInterval(intervalId);\n  }, []);\n\n  \n  const renderResultsPopup = () => {\n  const message = userWon ? getVictoryMessage(mistakes) : \"Next Time!\";\n    \n    return (\n      <div className=\"results-popup\" onClick={() => setShowResultsPopup(false)}>\n        <div className=\"results-content\" onClick={(e) => e.stopPropagation()}>\n          <button className=\"close-button\" onClick={() => setShowResultsPopup(false)}>X</button>\n          <h2 className=\"message-header\">{message}</h2>\n          <p className=\"game-number\">OhConnections #{correctGroups[0].number}</p>\n          <div className=\"difficulty-container\">\n            {difficultyLevels.map(level => (\n              <div key={level.name} className=\"difficulty-level\">\n                <span className=\"difficulty-color\" style={{ backgroundColor: level.color }}></span>\n                <span className=\"difficulty-name\">{level.name}</span>\n              </div>\n            ))}\n          </div>\n          <div className=\"game-summary-grid\">\n          {moveHistory.map((colorSet, index) => (\n            <div key={index} className=\"summary-row\">\n              {colorSet.map((color, colorIndex) => (\n                <div key={colorIndex} className=\"summary-block\" style={{ backgroundColor: color }}></div>\n              ))}\n            </div>\n          ))}\n\n          </div>\n          <p className=\"next-puzzle-countdown\">NEXT BOARD IN: {nextPuzzleCountdown}</p>\n          <button className=\"copy-summary-button\" onClick={handleCopySummary}>Share Results</button>\n        </div>\n      </div>\n    );\n  };\n\n  const handleCopySummary = () => {\n    const summaryString = moveHistory.map(moveRow => \n      moveRow.map(color => {\n        switch (color) {\n          case correctGroups[0].color: return '🟩';\n          case correctGroups[1].color: return '🟨';\n          case correctGroups[2].color: return '🟧';\n          case correctGroups[3].color: return '🟥';\n          default: return '⬜️';\n        }\n      }).join('')\n    ).join('\\n');\n  \n    const legend = `\\n\\n🟩 = Easy\\n🟨 = Medium\\n🟧 = Hard\\n🟥 = Impossible`;\n\n    const completeSummary = `OhConnections\\nBoard #${correctGroups[0].number}\\n\\n${summaryString}${legend}\\n\\nNEXT PUZZLE IN: ${nextPuzzleCountdown}\\n\\nwww.ohconnections.com`;\n    \n    navigator.clipboard.writeText(completeSummary).then(() => {\n      setPopupMessage('Game summary copied to clipboard!');\n      setShowPopup(true);\n      setTimeout(() => setShowPopup(false), 2000);\n    }, (err) => {\n      console.error('Could not copy text: ', err);\n    });\n  };\n  \n  \n  const renderHowToPlayPopup = () => {\n    if (!showHowToPlay) return null;\n  \n    return (\n      <div className=\"how-to-play-popup\" onClick={() => setShowHowToPlay(false)}>\n        <div className=\"how-to-play-content\" onClick={e => e.stopPropagation()}>\n          <button className=\"close-button\" onClick={() => setShowHowToPlay(false)}>X</button>\n          <h1>How to Play</h1>\n          <p>Goal: Find groups of four MLB players that have something in common</p>\n          <div className=\"example-section\">\n            <p>Example:</p>\n            <div className=\"example-group\">\n              <p>CURRENT DODGERS PLAYERS</p>\n              <div className=\"player-images\">\n                <img src={freddieFreeman} alt=\"Freddie Freeman\" />\n                <img src={mookieBetts} alt=\"Mookie Betts\" />\n                <img src={shoheiOhtani} alt=\"Shohei Ohtani\" />\n                <img src={maxMuncy} alt=\"Max Muncy\" />\n            </div>\n            </div>\n            <div className=\"example-group\">\n              <p>PLAYERS BORN IN VENEZUELA</p>\n              <div className=\"player-images\">\n                <img src={joseAltuve} alt=\"Jose Altuve\" />\n                <img src={ronaldAcunaJr} alt=\"Ronald Acuña Jr\" />\n                <img src={miguelCabrera} alt=\"Miguel Cabrera\" />\n                <img src={salvadorPerez} alt=\"Salvador Perez\" />\n            </div>\n            </div>\n          </div>\n          <p>Select four similar players and tap 'Submit' to check if you are correct</p>\n          <p>You have four incorrect guesses before the game ends</p>\n          <p>Each group is represented by a color: </p>\n          <div className=\"difficulty-container\">\n          {difficultyLevels.map(level => (\n            <div key={level.name} className=\"difficulty-level\">\n              <span className=\"difficulty-color\" style={{ backgroundColor: level.color }}></span>\n              <span className=\"difficulty-name\">{level.name}</span>\n            </div>\n          ))}\n        </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"connections-game\">\n    <div className=\"header-container\">\n      <div className=\"button-placeholder\"></div>\n      <h1>Create four groups of four!</h1>\n      <button className=\"game-controls button how-to-play-button\" onClick={() => setShowHowToPlay(true)}>How to Play</button>\n    </div>\n    {showPopup && <div className=\"popup-message\">{popupMessage}</div>}\n    <div className=\"guessed-groups\">\n      {guessedGroups.map((group, index) => (\n        <div \n          key={index} \n          className=\"guessed-group-combined\"\n          style={{ backgroundColor: group.color }}\n        >\n          <div className=\"group-images\">\n            {group.terms.map((term, termIndex) => (\n              <div key={termIndex} className=\"player-image-container\">\n                <img src={playerImages[term]} alt={term} className=\"guessed-player-image\" />\n                <div className=\"player-name-overlay\">{term.toUpperCase()}</div>\n              </div>\n            ))}\n          </div>\n          <div className=\"group-description\">{group.description}</div>\n        </div>\n      ))}\n    </div>\n\n    <div className=\"terms-grid\" style={{ gridTemplateColumns: width > 0 ? 'repeat(4, 1fr)' : 'repeat(2, 1fr)' }}>\n      {terms.map((term, index) => {\n        let imgSrc = playerImages[term];\n          let isSelected = selectedTerms.includes(term);\n          let isAnimating = selectedTerms.indexOf(term) === animateIndex;\n          let shouldShake = isSelected && guessIncorrect;\n          let isCooldown = cooldown;\n\n    return (\n      <div key={index} \n           className={`term-block ${isSelected ? 'selected' : ''} ${isAnimating ? 'jump-animation' : ''} ${shouldShake ? 'shake-animation' : ''} ${isSubmitting ? 'no-hover' : ''} ${isCooldown ? 'no-hover' : ''}`} \n           onClick={() => handleTermClick(term)}\n           style={{ cursor: isSubmitting ? 'default' : 'pointer' }}>\n        <img src={imgSrc} className=\"term-image\" alt={term} />\n        <div className=\"text-overlay\">{term}</div>\n      </div>\n\n          );\n      })}\n    </div>\n    {!gameOver && (\n      <div className=\"mistakes-section\">\n        <div className=\"mistakes-indicator\">\n          <span className=\"mistakes-text\">Mistakes remaining: </span>\n          {Array.from({ length: mistakes }, (_, i) => (\n            <img key={i} src={baseballImg} alt=\"Baseball\" className=\"baseball-icon\" />\n          ))}\n        </div>\n      </div>\n    )}\n    {!gameOver ? (\n      <div className=\"game-controls\">\n        <button \n          onClick={handleShuffle}\n          disabled={isSubmitting || shake || cooldown}\n          style={{ opacity: (isSubmitting || shake || cooldown) ? 0.5 : 1 }}>\n          Shuffle\n        </button>\n\n        <button \n          onClick={() => setSelectedTerms([])}\n          disabled={isSubmitting || shake || cooldown || selectedTerms.length === 0}\n          style={{ opacity: (isSubmitting || shake || cooldown) ? 0.5 : 1 }}>\n          Deselect All\n        </button>\n\n        <button \n          onClick={handleSubmit}\n          disabled={isSubmitting || shake || cooldown || selectedTerms.length !== 4}\n          style={{ opacity: (isSubmitting || shake || cooldown) ? 0.5 : 1 }}>\n          Submit\n        </button>\n      </div>\n    ) : (\n      <div className=\"game-over-controls\">\n        <button className=\"game-button\" onClick={() => setShowResultsPopup(true)}>View Results</button>\n      </div>\n    )}\n    {showResultsPopup && renderResultsPopup()}\n    {renderHowToPlayPopup()}\n    <a href=\"https://docs.google.com/forms/d/e/1FAIpQLScf3nrR79wVz0ZjBy6LaH18Xi9gH6RfwU8GMd3-O-luSJjB-Q/viewform?usp=sf_link\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"suggestions-link\">Suggestions</a>\n  </div>\n);\n\n  \n};\n\nexport default ConnectionsPage;","/Users/michaelgoldfarb/Documents/OhConnections/src/pages/inputs/03-15-2024/gameData.js",[],[],"/Users/michaelgoldfarb/Documents/OhConnections/src/pages/inputs/03-16-2024/gameData.js",[],[],"/Users/michaelgoldfarb/Documents/OhConnections/src/pages/inputs/03-18-2024/gameData.js",[],[],"/Users/michaelgoldfarb/Documents/OhConnections/src/pages/inputs/03-17-2024/gameData.js",[],[],{"ruleId":"102","severity":1,"message":"103","line":196,"column":9,"nodeType":"104","messageId":"105","endLine":196,"endColumn":27},{"ruleId":"102","severity":1,"message":"106","line":20,"column":17,"nodeType":"104","messageId":"105","endLine":20,"endColumn":23},{"ruleId":"102","severity":1,"message":"103","line":368,"column":9,"nodeType":"104","messageId":"105","endLine":368,"endColumn":27},{"ruleId":"102","severity":1,"message":"106","line":20,"column":17,"nodeType":"104","messageId":"105","endLine":20,"endColumn":23},{"ruleId":"102","severity":1,"message":"103","line":368,"column":9,"nodeType":"104","messageId":"105","endLine":368,"endColumn":27},{"ruleId":"102","severity":1,"message":"106","line":20,"column":17,"nodeType":"104","messageId":"105","endLine":20,"endColumn":23},{"ruleId":"102","severity":1,"message":"103","line":368,"column":9,"nodeType":"104","messageId":"105","endLine":368,"endColumn":27},{"ruleId":"102","severity":1,"message":"106","line":20,"column":17,"nodeType":"104","messageId":"105","endLine":20,"endColumn":23},{"ruleId":"102","severity":1,"message":"103","line":368,"column":9,"nodeType":"104","messageId":"105","endLine":368,"endColumn":27},"no-unused-vars","'shuffledTermsArray' is assigned a value but never used.","Identifier","unusedVar","'height' is assigned a value but never used."]