{"ast":null,"code":"var _jsxFileName = \"/Users/michaelgoldfarb/Desktop/OhConnections/web/web/src/pages/ConnectionsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './ConnectionsPage.css';\nimport baseballImg from '../images/baseball.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectionsPage = () => {\n  _s();\n  const initialTerms = ['Brook Lopez', 'Seth Curry', 'Jrue Holiday', 'Franz Wagner', 'Nikola Jokic', 'Shai Gilgeous-Alexander', 'Kevin Durant', 'Luka Doncic', 'Steve Kerr', 'Jason Kidd', 'Tyronn Lue', 'Steve Nash', 'Rasheed Wallace', 'Gary Payton', 'Charles Barkley', 'Karl Malone'];\n  const correctGroups = [{\n    description: 'Most Technical Fouls',\n    terms: ['Rasheed Wallace', 'Gary Payton', 'Charles Barkley', 'Karl Malone'],\n    color: '#4CAF50'\n  }, {\n    description: 'NBA Players Turned Coaches',\n    terms: ['Steve Kerr', 'Jason Kidd', 'Tyronn Lue', 'Steve Nash'],\n    color: '#e5de00'\n  }, {\n    description: 'All Star Starters',\n    terms: ['Nikola Jokic', 'Shai Gilgeous-Alexander', 'Kevin Durant', 'Luka Doncic'],\n    color: '#e27602'\n  }, {\n    description: 'Brothers in the NBA',\n    terms: ['Brook Lopez', 'Seth Curry', 'Jrue Holiday', 'Franz Wagner'],\n    color: '#de0a26'\n  }];\n  const [selectedTerms, setSelectedTerms] = useState([]);\n  const [showResultsPopup, setShowResultsPopup] = useState(false);\n  const [nextPuzzleCountdown, setNextPuzzleCountdown] = useState('');\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [remainingGroupsToReveal, setRemainingGroupsToReveal] = useState([]);\n  const [mistakes, setMistakes] = useState(4);\n  const [submittedSets, setSubmittedSets] = useState([]);\n  const [guessedGroups, setGuessedGroups] = useState([]);\n  const [terms, setTerms] = useState(initialTerms);\n  // const [terms, setTerms] = useState(() => {\n  //   const savedTerms = localStorage.getItem('terms');\n  //   return savedTerms ? JSON.parse(savedTerms) : initialTerms;\n  // });\n  // const [guessedGroups, setGuessedGroups] = useState(() => {\n  //   const savedGroups = localStorage.getItem('guessedGroups');\n  //   return savedGroups ? JSON.parse(savedGroups) : [];\n  // });\n  // const [mistakes, setMistakes] = useState(() => {\n  //   const savedMistakes = localStorage.getItem('mistakes');\n  //   return savedMistakes !== null ? parseInt(savedMistakes, 10) : 4;\n  // });\n  // const [submittedSets, setSubmittedSets] = useState(() => {\n  //   const savedSets = localStorage.getItem('submittedSets');\n  //   return savedSets ? JSON.parse(savedSets) : [];\n  // });\n  const [popupMessage, setPopupMessage] = useState(\"\");\n  const [showPopup, setShowPopup] = useState(false);\n\n  // useEffect(() => {\n  //   localStorage.setItem('terms', JSON.stringify(terms));\n  // }, [terms]);\n\n  // useEffect(() => {\n  //   localStorage.setItem('mistakes', mistakes.toString());\n  // }, [mistakes]);\n\n  // useEffect(() => {\n  //   localStorage.setItem('submittedSets', JSON.stringify(submittedSets));\n  // }, [submittedSets]);\n\n  // useEffect(() => {\n  //   localStorage.setItem('guessedGroups', JSON.stringify(guessedGroups));\n  // }, [guessedGroups]);\n\n  const handleTermClick = term => {\n    if (selectedTerms.includes(term)) {\n      setSelectedTerms(selectedTerms.filter(t => t !== term));\n      setShowPopup(false);\n    } else {\n      if (selectedTerms.length < 4) {\n        setSelectedTerms([...selectedTerms, term]);\n        setShowPopup(false);\n      } else {\n        setPopupMessage(\"You cannot select more than 4 players.\");\n        setShowPopup(true);\n        setTimeout(() => setShowPopup(false), 2000);\n      }\n    }\n  };\n  const handleSubmit = () => {\n    const currentSetSorted = [...selectedTerms].sort();\n    const currentSetString = currentSetSorted.join(',');\n    if (submittedSets.includes(currentSetString)) {\n      setPopupMessage(\"You cannot guess the same 4 players twice.\");\n      setShowPopup(true);\n      setTimeout(() => setShowPopup(false), 2000);\n      return;\n    } else {\n      const oneAway = correctGroups.some(group => {\n        const matchingTerms = group.terms.filter(term => currentSetSorted.includes(term));\n        // If 3 terms match, and the selected group is not exactly the correct group, it's \"one away\"\n        return matchingTerms.length === 3 && group.terms.sort().join(',') !== currentSetString;\n      });\n      const guessColors = currentSetSorted.map(term => {\n        const group = correctGroups.find(group => group.terms.includes(term));\n        return group ? group.color : '#FFFFFF'; // Fallback color, you can remove this if all terms will have a group\n      });\n\n      // Record the move with the colors for each term\n      setMoveHistory(prevHistory => [...prevHistory, guessColors]);\n      if (oneAway) {\n        if (mistakes > 1) {\n          setPopupMessage(\"One Away!\");\n          setShowPopup(true);\n          setTimeout(() => setShowPopup(false), 2000);\n          setSubmittedSets([...submittedSets, currentSetString]);\n          setMistakes(mistakes - 1);\n          return;\n        }\n      }\n      const foundGroup = correctGroups.find(group => group.terms.sort().join(',') === currentSetString);\n      if (foundGroup) {\n        const updatedGuessedGroups = [...guessedGroups, foundGroup];\n        setGuessedGroups(updatedGuessedGroups);\n        setTerms(terms.filter(term => !foundGroup.terms.includes(term)));\n        setSelectedTerms([]);\n        if (updatedGuessedGroups.length === correctGroups.length) {\n          setGameOver(true);\n        }\n      } else {\n        setSubmittedSets([...submittedSets, currentSetString]);\n        setMistakes(mistakes - 1);\n        if (mistakes <= 1) {\n          setPopupMessage(\"Nice try!\");\n          setShowPopup(true);\n          setTimeout(() => {\n            setShowPopup(false); // Ensure popup is hidden before revealing groups\n\n            const remainingGroups = correctGroups.filter(group => !guessedGroups.some(guessedGroup => guessedGroup.description === group.description));\n            setRemainingGroupsToReveal(remainingGroups);\n            setGameOver(true); // Mark the game as over\n            setSelectedTerms([]);\n            setMistakes(0); // Ensuring no more actions can be taken\n          }, 2000); // Match this with the popup timeout\n          return;\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    if (gameOver && remainingGroupsToReveal.length > 0) {\n      // Reveal the first group in the list after a delay\n      const timer = setTimeout(() => {\n        const [groupToReveal, ...restGroups] = remainingGroupsToReveal; // Destructure to get the first group and the rest\n        setGuessedGroups(prevGuessedGroups => [...prevGuessedGroups, groupToReveal]); // Add it to guessedGroups\n        setTerms(terms => terms.filter(term => !groupToReveal.terms.includes(term))); // Remove guessed terms from the terms array\n        setRemainingGroupsToReveal(restGroups); // Update to the rest of the groups\n      }, 1000);\n      return () => clearTimeout(timer); // Cleanup the timer\n    }\n  }, [remainingGroupsToReveal, gameOver, terms]);\n  const handleShuffle = () => {\n    const shuffledTermsArray = shuffleArray([...terms]);\n    setTerms(shuffledTermsArray);\n  };\n\n  // A simple shuffle function for the terms\n  const shuffleArray = array => {\n    let currentIndex = array.length,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n    return array;\n  };\n  const shuffledTermsArray = shuffleArray([...terms]);\n  const difficultyLevels = [{\n    name: 'Easy',\n    color: '#4CAF50'\n  }, {\n    name: 'Medium',\n    color: '#e5de00'\n  }, {\n    name: 'Hard',\n    color: '#e27602'\n  }, {\n    name: 'Impossible',\n    color: '#de0a26'\n  }];\n  const renderResultsPopup = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results-popup\",\n    onClick: () => setShowResultsPopup(false),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results-content\",\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: () => setShowResultsPopup(false),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Good Job!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"OhConnections #1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), difficultyLevels.map(level => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"difficulty-level\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"difficulty-color\",\n          style: {\n            backgroundColor: level.color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"difficulty-name\",\n          children: [level.name, \" \", level.icon || '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this)]\n      }, level.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-summary-grid\",\n        children: moveHistory.map((moveRow, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-row\",\n          children: moveRow.map((color, colorIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"summary-block\",\n            style: {\n              backgroundColor: color\n            }\n          }, colorIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 17\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"NEXT BOARD IN: 18:19:36\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"copy-summary-button\",\n        onClick: handleCopySummary,\n        children: \"Copy to Clipboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n  const handleCopySummary = () => {\n    // Generate the game summary string from the move history\n    const summaryString = moveHistory.map(moveRow => moveRow.map(color => {\n      // You will need to convert the color to the corresponding emoji or text representation\n      // This is an example; you will need to map your actual colors to the desired output\n      switch (color) {\n        case correctGroups[0].color:\n          return '🟩';\n        case correctGroups[1].color:\n          return '🟨';\n        case correctGroups[2].color:\n          return '🟧';\n        case correctGroups[3].color:\n          return '🟥';\n        default:\n          return '⬜️';\n        // Default for incorrect guesses or unmatched terms\n      }\n    }).join('')).join('\\n');\n    navigator.clipboard.writeText(summaryString).then(() => {\n      // Notify the user that the summary was copied, if needed.\n    }, err => {\n      console.error('Could not copy text: ', err);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connections-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create four groups of four!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 5\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup-message\",\n      children: popupMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 19\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"guessed-groups\",\n      children: guessedGroups.map((group, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"guessed-group-combined\",\n        style: {\n          backgroundColor: group.color\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"group-description\",\n          children: group.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"group-terms\",\n          children: group.terms.join(', ')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"terms-grid\",\n      children: terms.map((term, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `term-block ${selectedTerms.includes(term) ? 'selected' : ''}`,\n        onClick: () => handleTermClick(term),\n        children: term\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 5\n    }, this), !gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mistakes-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mistakes-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mistakes-text\",\n          children: \"Mistakes remaining: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this), Array.from({\n          length: mistakes\n        }, (_, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: baseballImg,\n          alt: \"Baseball\",\n          className: \"baseball-icon\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), !gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleShuffle,\n        children: \"Shuffle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedTerms([]),\n        disabled: selectedTerms.length === 0,\n        children: \"Deselect All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        disabled: selectedTerms.length !== 4,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over-controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"game-button\",\n        onClick: () => setShowResultsPopup(true),\n        children: \"View Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), showResultsPopup && renderResultsPopup()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n};\n_s(ConnectionsPage, \"fEMh6dr9OfZ1fpUeV25HVfMIYHU=\");\n_c = ConnectionsPage;\nexport default ConnectionsPage;\nvar _c;\n$RefreshReg$(_c, \"ConnectionsPage\");","map":{"version":3,"names":["React","useState","useEffect","baseballImg","jsxDEV","_jsxDEV","ConnectionsPage","_s","initialTerms","correctGroups","description","terms","color","selectedTerms","setSelectedTerms","showResultsPopup","setShowResultsPopup","nextPuzzleCountdown","setNextPuzzleCountdown","moveHistory","setMoveHistory","gameOver","setGameOver","remainingGroupsToReveal","setRemainingGroupsToReveal","mistakes","setMistakes","submittedSets","setSubmittedSets","guessedGroups","setGuessedGroups","setTerms","popupMessage","setPopupMessage","showPopup","setShowPopup","handleTermClick","term","includes","filter","t","length","setTimeout","handleSubmit","currentSetSorted","sort","currentSetString","join","oneAway","some","group","matchingTerms","guessColors","map","find","prevHistory","foundGroup","updatedGuessedGroups","remainingGroups","guessedGroup","timer","groupToReveal","restGroups","prevGuessedGroups","clearTimeout","handleShuffle","shuffledTermsArray","shuffleArray","array","currentIndex","randomIndex","Math","floor","random","difficultyLevels","name","renderResultsPopup","className","onClick","children","e","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","level","style","backgroundColor","icon","moveRow","index","colorIndex","handleCopySummary","summaryString","navigator","clipboard","writeText","then","err","console","error","Array","from","_","i","src","alt","disabled","_c","$RefreshReg$"],"sources":["/Users/michaelgoldfarb/Desktop/OhConnections/web/web/src/pages/ConnectionsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './ConnectionsPage.css';\nimport baseballImg from '../images/baseball.png';\n\nconst ConnectionsPage = () => {\n  const initialTerms = ['Brook Lopez', 'Seth Curry', 'Jrue Holiday', 'Franz Wagner', 'Nikola Jokic', 'Shai Gilgeous-Alexander', 'Kevin Durant', 'Luka Doncic', 'Steve Kerr', 'Jason Kidd', 'Tyronn Lue', 'Steve Nash', 'Rasheed Wallace', 'Gary Payton', 'Charles Barkley', 'Karl Malone'];\n  const correctGroups = [\n    { description: 'Most Technical Fouls', terms: ['Rasheed Wallace', 'Gary Payton', 'Charles Barkley', 'Karl Malone'],  color: '#4CAF50' },\n    { description: 'NBA Players Turned Coaches', terms: ['Steve Kerr', 'Jason Kidd', 'Tyronn Lue', 'Steve Nash'],  color: '#e5de00' },\n    { description: 'All Star Starters', terms: ['Nikola Jokic', 'Shai Gilgeous-Alexander', 'Kevin Durant', 'Luka Doncic'], color: '#e27602' },\n    { description: 'Brothers in the NBA', terms: ['Brook Lopez', 'Seth Curry', 'Jrue Holiday', 'Franz Wagner'], color: '#de0a26' }]\n  \n  const [selectedTerms, setSelectedTerms] = useState([]);\n  const [showResultsPopup, setShowResultsPopup] = useState(false);\n  const [nextPuzzleCountdown, setNextPuzzleCountdown] = useState('');\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [remainingGroupsToReveal, setRemainingGroupsToReveal] = useState([]);\n  const [mistakes, setMistakes] = useState(4);\n  const [submittedSets, setSubmittedSets] = useState([]);\n  const [guessedGroups, setGuessedGroups] = useState([]);\n  const [terms, setTerms] = useState(initialTerms);\n  // const [terms, setTerms] = useState(() => {\n  //   const savedTerms = localStorage.getItem('terms');\n  //   return savedTerms ? JSON.parse(savedTerms) : initialTerms;\n  // });\n  // const [guessedGroups, setGuessedGroups] = useState(() => {\n  //   const savedGroups = localStorage.getItem('guessedGroups');\n  //   return savedGroups ? JSON.parse(savedGroups) : [];\n  // });\n  // const [mistakes, setMistakes] = useState(() => {\n  //   const savedMistakes = localStorage.getItem('mistakes');\n  //   return savedMistakes !== null ? parseInt(savedMistakes, 10) : 4;\n  // });\n  // const [submittedSets, setSubmittedSets] = useState(() => {\n  //   const savedSets = localStorage.getItem('submittedSets');\n  //   return savedSets ? JSON.parse(savedSets) : [];\n  // });\n  const [popupMessage, setPopupMessage] = useState(\"\");\n  const [showPopup, setShowPopup] = useState(false);\n\n  // useEffect(() => {\n  //   localStorage.setItem('terms', JSON.stringify(terms));\n  // }, [terms]);\n  \n  // useEffect(() => {\n  //   localStorage.setItem('mistakes', mistakes.toString());\n  // }, [mistakes]);\n\n  // useEffect(() => {\n  //   localStorage.setItem('submittedSets', JSON.stringify(submittedSets));\n  // }, [submittedSets]);\n\n  // useEffect(() => {\n  //   localStorage.setItem('guessedGroups', JSON.stringify(guessedGroups));\n  // }, [guessedGroups]);\n\n  const handleTermClick = (term) => {\n    if (selectedTerms.includes(term)) {\n      setSelectedTerms(selectedTerms.filter(t => t !== term));\n      setShowPopup(false);\n    } else {\n      if (selectedTerms.length < 4) {\n        setSelectedTerms([...selectedTerms, term]);\n        setShowPopup(false);\n      } else {\n        setPopupMessage(\"You cannot select more than 4 players.\");\n        setShowPopup(true);\n        setTimeout(() => setShowPopup(false), 2000);\n      }\n    }\n  };\n\n  const handleSubmit = () => {\n    const currentSetSorted = [...selectedTerms].sort();\n    const currentSetString = currentSetSorted.join(',');\n  \n    if (submittedSets.includes(currentSetString)) {\n      setPopupMessage(\"You cannot guess the same 4 players twice.\");\n      setShowPopup(true);\n      setTimeout(() => setShowPopup(false), 2000);\n      return;\n    } else {\n      const oneAway = correctGroups.some(group => {\n        const matchingTerms = group.terms.filter(term => currentSetSorted.includes(term));\n        // If 3 terms match, and the selected group is not exactly the correct group, it's \"one away\"\n        return matchingTerms.length === 3 && group.terms.sort().join(',') !== currentSetString;\n      });\n\n      const guessColors = currentSetSorted.map(term => {\n        const group = correctGroups.find(group => group.terms.includes(term));\n        return group ? group.color : '#FFFFFF'; // Fallback color, you can remove this if all terms will have a group\n      });\n    \n      // Record the move with the colors for each term\n      setMoveHistory(prevHistory => [\n        ...prevHistory,\n        guessColors\n      ]);\n  \n      if (oneAway) {\n        if (mistakes > 1) {\n          setPopupMessage(\"One Away!\");\n          setShowPopup(true);\n          setTimeout(() => setShowPopup(false), 2000);\n          setSubmittedSets([...submittedSets, currentSetString]);\n          setMistakes(mistakes - 1);\n          return; \n        }\n      }\n\n      const foundGroup = correctGroups.find(group =>\n        group.terms.sort().join(',') === currentSetString\n      );\n      \n      if (foundGroup) {\n        const updatedGuessedGroups = [...guessedGroups, foundGroup];\n        setGuessedGroups(updatedGuessedGroups);\n        setTerms(terms.filter(term => !foundGroup.terms.includes(term)));\n        setSelectedTerms([]);\n        if (updatedGuessedGroups.length === correctGroups.length) {\n          setGameOver(true);\n        }\n      } else {\n        setSubmittedSets([...submittedSets, currentSetString]);\n        setMistakes(mistakes - 1);\n        if (mistakes <= 1) {\n          setPopupMessage(\"Nice try!\");\n          setShowPopup(true);\n          setTimeout(() => {\n            setShowPopup(false); // Ensure popup is hidden before revealing groups\n    \n            const remainingGroups = correctGroups.filter(group => \n                !guessedGroups.some(guessedGroup => \n                    guessedGroup.description === group.description\n                )\n            );\n    \n            setRemainingGroupsToReveal(remainingGroups);\n            setGameOver(true); // Mark the game as over\n            setSelectedTerms([]);\n            setMistakes(0); // Ensuring no more actions can be taken\n        }, 2000); // Match this with the popup timeout\n        return;\n        }\n      }\n    }\n  };\n  \n\n  useEffect(() => {\n    if (gameOver && remainingGroupsToReveal.length > 0) {\n      // Reveal the first group in the list after a delay\n      const timer = setTimeout(() => {\n        const [groupToReveal, ...restGroups] = remainingGroupsToReveal; // Destructure to get the first group and the rest\n      setGuessedGroups(prevGuessedGroups => [...prevGuessedGroups, groupToReveal]); // Add it to guessedGroups\n      setTerms(terms => terms.filter(term => !groupToReveal.terms.includes(term))); // Remove guessed terms from the terms array\n      setRemainingGroupsToReveal(restGroups); // Update to the rest of the groups\n    }, 1000);\n  \n      return () => clearTimeout(timer); // Cleanup the timer\n    }\n  }, [remainingGroupsToReveal, gameOver, terms]);\n  \n  \n  const handleShuffle = () => {\n    const shuffledTermsArray = shuffleArray([...terms]);\n    setTerms(shuffledTermsArray);\n  };\n\n  // A simple shuffle function for the terms\n  const shuffleArray = (array) => {\n    let currentIndex = array.length,  randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  };\n\n  const shuffledTermsArray = shuffleArray([...terms]);\n\n  const difficultyLevels = [\n    { name: 'Easy', color: '#4CAF50' },\n    { name: 'Medium', color: '#e5de00' },\n    { name: 'Hard', color: '#e27602' },\n    { name: 'Impossible', color: '#de0a26' },\n  ];\n  \n  \n  const renderResultsPopup = () => (\n    <div className=\"results-popup\" onClick={() => setShowResultsPopup(false)}>\n      <div className=\"results-content\" onClick={(e) => e.stopPropagation()}>\n        <button className=\"close-button\" onClick={() => setShowResultsPopup(false)}>X</button>\n        <h2>Good Job!</h2>\n        <p>OhConnections #1</p>\n        {difficultyLevels.map(level => (\n          <div key={level.name} className=\"difficulty-level\">\n            <span className=\"difficulty-color\" style={{ backgroundColor: level.color }}></span> \n            <span className=\"difficulty-name\">{level.name} {level.icon || ''}</span>\n          </div>\n        ))}\n        <div className=\"game-summary-grid\">\n          {moveHistory.map((moveRow, index) => (\n            <div key={index} className=\"summary-row\">\n              {moveRow.map((color, colorIndex) => (\n                <div key={colorIndex} className=\"summary-block\" style={{ backgroundColor: color }}></div>\n              ))}\n            </div>\n          ))}\n        </div>\n        <p>NEXT BOARD IN: 18:19:36</p>\n        <button className=\"copy-summary-button\" onClick={handleCopySummary}>Copy to Clipboard</button>\n      </div>\n    </div>\n  );\n\n  \n\n\n  const handleCopySummary = () => {\n    // Generate the game summary string from the move history\n    const summaryString = moveHistory.map(moveRow => \n      moveRow.map(color => {\n        // You will need to convert the color to the corresponding emoji or text representation\n        // This is an example; you will need to map your actual colors to the desired output\n        switch (color) {\n          case correctGroups[0].color: return '🟩';\n          case correctGroups[1].color: return '🟨';\n          case correctGroups[2].color: return '🟧';\n          case correctGroups[3].color: return '🟥';\n          default: return '⬜️'; // Default for incorrect guesses or unmatched terms\n        }\n      }).join('')\n    ).join('\\n');\n  \n    navigator.clipboard.writeText(summaryString).then(() => {\n      // Notify the user that the summary was copied, if needed.\n    }, (err) => {\n      console.error('Could not copy text: ', err);\n    });\n  };\n  \n  \n  \n\n  return (\n    <div className=\"connections-game\">\n    <h1>Create four groups of four!</h1>\n    {showPopup && <div className=\"popup-message\">{popupMessage}</div>} {/* Move this above the .guessed-groups and .terms-grid */}\n    <div className=\"guessed-groups\">\n      {guessedGroups.map((group, index) => (\n        <div \n          key={index} \n          className=\"guessed-group-combined\"\n          style={{ backgroundColor: group.color }}\n        >\n          <div className=\"group-description\">{group.description}</div>\n          <div className=\"group-terms\">{group.terms.join(', ')}</div>\n        </div>\n      ))}\n    </div>\n    <div className=\"terms-grid\">\n      {terms.map((term, index) => (\n        <div key={index} className={`term-block ${selectedTerms.includes(term) ? 'selected' : ''}`} onClick={() => handleTermClick(term)}>\n          {term}\n        </div>\n      ))}\n    </div>\n    {!gameOver && (\n      <div className=\"mistakes-section\">\n        <div className=\"mistakes-indicator\">\n          <span className=\"mistakes-text\">Mistakes remaining: </span>\n          {Array.from({ length: mistakes }, (_, i) => (\n            <img key={i} src={baseballImg} alt=\"Baseball\" className=\"baseball-icon\" />\n          ))}\n        </div>\n      </div>\n    )}\n    {!gameOver ? (\n      <div className=\"game-controls\">\n        <button onClick={handleShuffle}>Shuffle</button>\n        <button onClick={() => setSelectedTerms([])} disabled={selectedTerms.length === 0}>Deselect All</button>\n        <button onClick={handleSubmit} disabled={selectedTerms.length !== 4}>Submit</button>\n      </div>\n    ) : (\n      <div className=\"game-over-controls\">\n        <button className=\"game-button\" onClick={() => setShowResultsPopup(true)}>View Results</button>\n      </div>\n    )}\n    {showResultsPopup && renderResultsPopup()}\n  </div>\n);\n\n  \n};\n\nexport default ConnectionsPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}