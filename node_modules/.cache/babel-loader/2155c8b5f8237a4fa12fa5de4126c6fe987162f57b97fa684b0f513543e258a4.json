{"ast":null,"code":"var _jsxFileName = \"/Users/michaelgoldfarb/Desktop/OhConnections/web/web/src/pages/ConnectionsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './ConnectionsPage.css';\nimport baseballImg from '../images/baseball.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectionsPage = () => {\n  _s();\n  const initialTerms = ['Brook Lopez', 'Seth Curry', 'Jrue Holiday', 'Franz Wagner', 'Nikola Jokic', 'Shai Gilgeous-Alexander', 'Kevin Durant', 'Luka Doncic', 'Steve Kerr', 'Jason Kidd', 'Tyronn Lue', 'Steve Nash', 'Rasheed Wallace', 'Gary Payton', 'Charles Barkley', 'Karl Malone'];\n  const correctGroups = [{\n    description: 'Most Technical Fouls',\n    terms: ['Rasheed Wallace', 'Gary Payton', 'Charles Barkley', 'Karl Malone']\n  }, {\n    description: 'NBA Players Turned Coaches',\n    terms: ['Steve Kerr', 'Jason Kidd', 'Tyronn Lue', 'Steve Nash']\n  }, {\n    description: 'All Star Starters',\n    terms: ['Nikola Jokic', 'Shai Gilgeous-Alexander', 'Kevin Durant', 'Luka Doncic']\n  }, {\n    description: 'Brothers in the NBA',\n    terms: ['Brook Lopez', 'Seth Curry', 'Jrue Holiday', 'Franz Wagner']\n  }];\n  const [terms, setTerms] = useState(initialTerms);\n  const [selectedTerms, setSelectedTerms] = useState([]);\n  const [guessedGroups, setGuessedGroups] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [remainingGroupsToReveal, setRemainingGroupsToReveal] = useState([]);\n  const [mistakes, setMistakes] = useState(4);\n  const [submittedSets, setSubmittedSets] = useState([]);\n  // const [mistakes, setMistakes] = useState(() => {\n  //   const savedMistakes = localStorage.getItem('mistakes');\n  //   return savedMistakes !== null ? parseInt(savedMistakes, 10) : 4;\n  // });\n  // const [submittedSets, setSubmittedSets] = useState(() => {\n  //   const savedSets = localStorage.getItem('submittedSets');\n  //   return savedSets ? JSON.parse(savedSets) : [];\n  // });\n  const [popupMessage, setPopupMessage] = useState(\"\");\n  const [showPopup, setShowPopup] = useState(false);\n\n  // useEffect(() => {\n  //   localStorage.setItem('mistakes', mistakes.toString());\n  // }, [mistakes]);\n\n  // useEffect(() => {\n  //   localStorage.setItem('submittedSets', JSON.stringify(submittedSets));\n  // }, [submittedSets]);\n\n  const handleTermClick = term => {\n    if (selectedTerms.includes(term)) {\n      setSelectedTerms(selectedTerms.filter(t => t !== term));\n      setShowPopup(false);\n    } else {\n      if (selectedTerms.length < 4) {\n        setSelectedTerms([...selectedTerms, term]);\n        setShowPopup(false);\n      } else {\n        setPopupMessage(\"You cannot select more than 4 players.\");\n        setShowPopup(true);\n        setTimeout(() => setShowPopup(false), 2000);\n      }\n    }\n  };\n  const handleSubmit = () => {\n    const currentSetSorted = [...selectedTerms].sort();\n    const currentSetString = currentSetSorted.join(',');\n    if (submittedSets.includes(currentSetString)) {\n      setPopupMessage(\"You cannot guess the same 4 players twice.\");\n      setShowPopup(true);\n      setTimeout(() => setShowPopup(false), 2000);\n      return;\n    } else {\n      const oneAway = correctGroups.some(group => {\n        const matchingTerms = group.terms.filter(term => currentSetSorted.includes(term));\n        // If 3 terms match, and the selected group is not exactly the correct group, it's \"one away\"\n        return matchingTerms.length === 3 && group.terms.sort().join(',') !== currentSetString;\n      });\n      if (oneAway) {\n        if (mistakes > 1) {\n          setPopupMessage(\"One Away!\");\n          setShowPopup(true);\n          setTimeout(() => setShowPopup(false), 2000);\n          setSubmittedSets([...submittedSets, currentSetString]);\n          setMistakes(mistakes - 1);\n          return;\n        }\n      }\n      const foundGroup = correctGroups.find(group => group.terms.sort().join(',') === currentSetString);\n      if (foundGroup) {\n        setGuessedGroups([...guessedGroups, foundGroup]);\n        setTerms(terms.filter(term => !foundGroup.terms.includes(term)));\n        setSelectedTerms([]);\n      } else {\n        setSubmittedSets([...submittedSets, currentSetString]);\n        setMistakes(mistakes - 1);\n        if (mistakes <= 1) {\n          setPopupMessage(\"Nice try!\");\n          setShowPopup(true);\n          setTimeout(() => setShowPopup(false), 2000);\n          const remainingGroups = correctGroups.filter(group => !guessedGroups.some(guessedGroup => guessedGroup.description === group.description));\n          setGuessedGroups([...guessedGroups, ...remainingGroups]);\n\n          // Update the terms to only include those not in the newly guessed groups\n          const remainingTerms = terms.filter(term => !remainingGroups.some(group => group.terms.includes(term)));\n          setTerms(remainingTerms);\n          setSelectedTerms([]);\n        }\n      }\n    }\n  };\n  const handleShuffle = () => {\n    setTerms(shuffledTermsArray);\n    setSelectedTerms([]);\n  };\n\n  // A simple shuffle function for the terms\n  const shuffleArray = array => {\n    let currentIndex = array.length,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n    return array;\n  };\n  const shuffledTermsArray = shuffleArray([...terms]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connections-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create four groups of four!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"guessed-groups\",\n      children: guessedGroups.map((group, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"guessed-group-combined\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"group-description\",\n          children: group.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"group-terms\",\n          children: group.terms.join(', ')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"terms-grid\",\n      children: [showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-message\",\n        children: popupMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this), terms.map((term, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `term-block ${selectedTerms.includes(term) ? 'selected' : ''}`,\n        onClick: () => handleTermClick(term),\n        children: term\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mistakes-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mistakes-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mistakes-text\",\n          children: \"Mistakes remaining: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), Array.from({\n          length: mistakes\n        }, (_, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: baseballImg,\n          alt: \"Baseball\",\n          className: \"baseball-icon\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleShuffle,\n        children: \"Shuffle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedTerms([]),\n        className: selectedTerms.length > 0 ? \"\" : \"disabled\",\n        disabled: selectedTerms.length === 0,\n        children: \"Deselect All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        className: selectedTerms.length === 4 ? \"\" : \"disabled\",\n        disabled: selectedTerms.length !== 4,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(ConnectionsPage, \"sAtt1Rh/9ZFzIq9PS1LAN2zF+kY=\");\n_c = ConnectionsPage;\nexport default ConnectionsPage;\nvar _c;\n$RefreshReg$(_c, \"ConnectionsPage\");","map":{"version":3,"names":["React","useState","useEffect","baseballImg","jsxDEV","_jsxDEV","ConnectionsPage","_s","initialTerms","correctGroups","description","terms","setTerms","selectedTerms","setSelectedTerms","guessedGroups","setGuessedGroups","gameOver","setGameOver","remainingGroupsToReveal","setRemainingGroupsToReveal","mistakes","setMistakes","submittedSets","setSubmittedSets","popupMessage","setPopupMessage","showPopup","setShowPopup","handleTermClick","term","includes","filter","t","length","setTimeout","handleSubmit","currentSetSorted","sort","currentSetString","join","oneAway","some","group","matchingTerms","foundGroup","find","remainingGroups","guessedGroup","remainingTerms","handleShuffle","shuffledTermsArray","shuffleArray","array","currentIndex","randomIndex","Math","floor","random","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","Array","from","_","i","src","alt","disabled","_c","$RefreshReg$"],"sources":["/Users/michaelgoldfarb/Desktop/OhConnections/web/web/src/pages/ConnectionsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './ConnectionsPage.css';\nimport baseballImg from '../images/baseball.png';\n\nconst ConnectionsPage = () => {\n  const initialTerms = ['Brook Lopez', 'Seth Curry', 'Jrue Holiday', 'Franz Wagner', 'Nikola Jokic', 'Shai Gilgeous-Alexander', 'Kevin Durant', 'Luka Doncic', 'Steve Kerr', 'Jason Kidd', 'Tyronn Lue', 'Steve Nash', 'Rasheed Wallace', 'Gary Payton', 'Charles Barkley', 'Karl Malone'];\n  const correctGroups = [\n    { description: 'Most Technical Fouls', terms: ['Rasheed Wallace', 'Gary Payton', 'Charles Barkley', 'Karl Malone'] },\n    { description: 'NBA Players Turned Coaches', terms: ['Steve Kerr', 'Jason Kidd', 'Tyronn Lue', 'Steve Nash'] },\n    { description: 'All Star Starters', terms: ['Nikola Jokic', 'Shai Gilgeous-Alexander', 'Kevin Durant', 'Luka Doncic'] },\n    { description: 'Brothers in the NBA', terms: ['Brook Lopez', 'Seth Curry', 'Jrue Holiday', 'Franz Wagner'] }]\n  \n  const [terms, setTerms] = useState(initialTerms);\n  const [selectedTerms, setSelectedTerms] = useState([]);\n  const [guessedGroups, setGuessedGroups] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [remainingGroupsToReveal, setRemainingGroupsToReveal] = useState([]);\n  const [mistakes, setMistakes] = useState(4);\n  const [submittedSets, setSubmittedSets] = useState([]);\n  // const [mistakes, setMistakes] = useState(() => {\n  //   const savedMistakes = localStorage.getItem('mistakes');\n  //   return savedMistakes !== null ? parseInt(savedMistakes, 10) : 4;\n  // });\n  // const [submittedSets, setSubmittedSets] = useState(() => {\n  //   const savedSets = localStorage.getItem('submittedSets');\n  //   return savedSets ? JSON.parse(savedSets) : [];\n  // });\n  const [popupMessage, setPopupMessage] = useState(\"\");\n  const [showPopup, setShowPopup] = useState(false);\n\n  // useEffect(() => {\n  //   localStorage.setItem('mistakes', mistakes.toString());\n  // }, [mistakes]);\n\n  // useEffect(() => {\n  //   localStorage.setItem('submittedSets', JSON.stringify(submittedSets));\n  // }, [submittedSets]);\n\n  const handleTermClick = (term) => {\n    if (selectedTerms.includes(term)) {\n      setSelectedTerms(selectedTerms.filter(t => t !== term));\n      setShowPopup(false);\n    } else {\n      if (selectedTerms.length < 4) {\n        setSelectedTerms([...selectedTerms, term]);\n        setShowPopup(false);\n      } else {\n        setPopupMessage(\"You cannot select more than 4 players.\");\n        setShowPopup(true);\n        setTimeout(() => setShowPopup(false), 2000);\n      }\n    }\n  };\n\n  const handleSubmit = () => {\n    const currentSetSorted = [...selectedTerms].sort();\n    const currentSetString = currentSetSorted.join(',');\n  \n    if (submittedSets.includes(currentSetString)) {\n      setPopupMessage(\"You cannot guess the same 4 players twice.\");\n      setShowPopup(true);\n      setTimeout(() => setShowPopup(false), 2000);\n      return;\n    } else {\n      const oneAway = correctGroups.some(group => {\n        const matchingTerms = group.terms.filter(term => currentSetSorted.includes(term));\n        // If 3 terms match, and the selected group is not exactly the correct group, it's \"one away\"\n        return matchingTerms.length === 3 && group.terms.sort().join(',') !== currentSetString;\n      });\n  \n      if (oneAway) {\n        if (mistakes > 1) {\n          setPopupMessage(\"One Away!\");\n          setShowPopup(true);\n          setTimeout(() => setShowPopup(false), 2000);\n          setSubmittedSets([...submittedSets, currentSetString]);\n          setMistakes(mistakes - 1);\n          return; \n        }\n      }\n\n      const foundGroup = correctGroups.find(group =>\n        group.terms.sort().join(',') === currentSetString\n      );\n      \n      if (foundGroup) {\n        setGuessedGroups([...guessedGroups, foundGroup]);\n        setTerms(terms.filter(term => !foundGroup.terms.includes(term)));\n        setSelectedTerms([]);\n      } else {\n        setSubmittedSets([...submittedSets, currentSetString]);\n        setMistakes(mistakes - 1);\n        if (mistakes <= 1) {\n          setPopupMessage(\"Nice try!\");\n          setShowPopup(true);\n          setTimeout(() => setShowPopup(false), 2000);\n\n          const remainingGroups = correctGroups.filter(group => \n            !guessedGroups.some(guessedGroup => \n                guessedGroup.description === group.description\n            )\n        );\n\n        setGuessedGroups([...guessedGroups, ...remainingGroups]);\n    \n        // Update the terms to only include those not in the newly guessed groups\n        const remainingTerms = terms.filter(term => \n            !remainingGroups.some(group => group.terms.includes(term))\n        );\n        setTerms(remainingTerms);\n        setSelectedTerms([]);\n        }\n      }\n    }\n  };\n  \n\n\n  const handleShuffle = () => {\n    setTerms(shuffledTermsArray);\n    setSelectedTerms([]);\n  };\n\n  // A simple shuffle function for the terms\n  const shuffleArray = (array) => {\n    let currentIndex = array.length,  randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  };\n\n  const shuffledTermsArray = shuffleArray([...terms]);\n\n  return (\n    <div className=\"connections-game\">\n      <h1>Create four groups of four!</h1>\n      <div className=\"guessed-groups\">\n        {guessedGroups.map((group, index) => (\n          <div key={index} className=\"guessed-group-combined\">\n            <div className=\"group-description\">{group.description}</div> {/* New element for the description */}\n            <div className=\"group-terms\">{group.terms.join(', ')}</div>\n          </div>\n        ))}\n      </div>\n      <div className=\"terms-grid\">\n        {showPopup && (\n          <div className=\"popup-message\">{popupMessage}</div>\n        )}\n        {terms.map((term, index) => (\n          <div key={index} className={`term-block ${selectedTerms.includes(term) ? 'selected' : ''}`} onClick={() => handleTermClick(term)}>\n            {term}\n          </div>\n        ))}\n      </div>\n      <div className=\"mistakes-section\">\n        <div className=\"mistakes-indicator\">\n          <span className=\"mistakes-text\">Mistakes remaining: </span>\n          {Array.from({ length: mistakes }, (_, i) => (\n            <img key={i} src={baseballImg} alt=\"Baseball\" className=\"baseball-icon\" />\n          ))}\n        </div>\n      </div>\n      <div className=\"game-controls\">\n        <button onClick={handleShuffle}>Shuffle</button>\n        <button onClick={() => setSelectedTerms([])} className={selectedTerms.length > 0 ? \"\" : \"disabled\"} disabled={selectedTerms.length === 0}>Deselect All</button>\n        <button onClick={handleSubmit} className={selectedTerms.length === 4 ? \"\" : \"disabled\"} disabled={selectedTerms.length !== 4}>Submit</button>\n      </div>\n    </div>\n  );\n  \n};\n\nexport default ConnectionsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}