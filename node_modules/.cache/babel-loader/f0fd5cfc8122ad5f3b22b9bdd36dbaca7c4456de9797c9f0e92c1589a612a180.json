{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { GoogleAuthProvider, getAuth, signInWithPopup, signOut } from \"firebase/auth\";\nimport { initializeFirestore, query, getDocs, collection, where, addDoc } from \"firebase/firestore\";\nimport { getAnalytics } from \"firebase/analytics\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDbS_yJYrLhAj55r639pdhb6kYINT-efi8\",\n  authDomain: \"mlbgamepredictor.firebaseapp.com\",\n  databaseURL: \"https://mlbgamepredictor-default-rtdb.firebaseio.com\",\n  projectId: \"mlbgamepredictor\",\n  storageBucket: \"mlbgamepredictor.appspot.com\",\n  messagingSenderId: \"540979386958\",\n  appId: \"1:540979386958:web:1eeb534adc2228c4f3c11f\",\n  measurementId: \"G-5GT94Y3VBB\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst firestore = initializeFirestore(app, {\n  experimentalForceLongPolling: true,\n  useFetchStreams: false\n});\nconst googleProvider = new GoogleAuthProvider();\nconst signInWithGoogle = async () => {\n  try {\n    const res = await signInWithPopup(auth, googleProvider);\n    const user = res.user;\n    const q = query(collection(firestore, \"users\"), where(\"uid\", \"==\", user.uid));\n    const docs = await getDocs(q);\n    if (docs.docs.length === 0) {\n      await addDoc(collection(firestore, \"users\"), {\n        uid: user.uid,\n        name: user.displayName,\n        authProvider: \"google\",\n        email: user.email\n      });\n    }\n    console.log(\"User signed in:\");\n    console.log(\"Name:\", user.displayName);\n    console.log(\"Email:\", user.email);\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nconst logout = () => {\n  signOut(auth);\n};\nexport { auth, firestore as db, signInWithGoogle, logout };","map":{"version":3,"names":["initializeApp","GoogleAuthProvider","getAuth","signInWithPopup","signOut","initializeFirestore","query","getDocs","collection","where","addDoc","getAnalytics","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","firestore","experimentalForceLongPolling","useFetchStreams","googleProvider","signInWithGoogle","res","user","q","uid","docs","length","name","displayName","authProvider","email","console","log","err","error","alert","message","logout","db"],"sources":["/Users/michaelgoldfarb/Desktop/MLBGamePredictor/web/web/src/firebase.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  GoogleAuthProvider,\n  getAuth,\n  signInWithPopup,\n  signOut,\n} from \"firebase/auth\";\nimport {\n  initializeFirestore,\n  query,\n  getDocs,\n  collection,\n  where,\n  addDoc,\n} from \"firebase/firestore\";\nimport { getAnalytics } from \"firebase/analytics\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDbS_yJYrLhAj55r639pdhb6kYINT-efi8\",\n  authDomain: \"mlbgamepredictor.firebaseapp.com\",\n  databaseURL: \"https://mlbgamepredictor-default-rtdb.firebaseio.com\",\n  projectId: \"mlbgamepredictor\",\n  storageBucket: \"mlbgamepredictor.appspot.com\",\n  messagingSenderId: \"540979386958\",\n  appId: \"1:540979386958:web:1eeb534adc2228c4f3c11f\",\n  measurementId: \"G-5GT94Y3VBB\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst firestore = initializeFirestore(app, {\n  experimentalForceLongPolling: true,\n  useFetchStreams: false,\n});\n\nconst googleProvider = new GoogleAuthProvider();\nconst signInWithGoogle = async () => {\n  try {\n    const res = await signInWithPopup(auth, googleProvider);\n    const user = res.user;\n    const q = query(collection(firestore, \"users\"), where(\"uid\", \"==\", user.uid));\n    const docs = await getDocs(q);\n    if (docs.docs.length === 0) {\n      await addDoc(collection(firestore, \"users\"), {\n        uid: user.uid,\n        name: user.displayName,\n        authProvider: \"google\",\n        email: user.email,\n      });\n    }\n    console.log(\"User signed in:\");\n    console.log(\"Name:\", user.displayName);\n    console.log(\"Email:\", user.email);\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst logout = () => {\n  signOut(auth);\n};\n\nexport { auth, firestore as db, signInWithGoogle, logout };\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,kBAAkB,EAClBC,OAAO,EACPC,eAAe,EACfC,OAAO,QACF,eAAe;AACtB,SACEC,mBAAmB,EACnBC,KAAK,EACLC,OAAO,EACPC,UAAU,EACVC,KAAK,EACLC,MAAM,QACD,oBAAoB;AAC3B,SAASC,YAAY,QAAQ,oBAAoB;;AAEjD;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,kCAAkC;EAC9CC,WAAW,EAAE,sDAAsD;EACnEC,SAAS,EAAE,kBAAkB;EAC7BC,aAAa,EAAE,8BAA8B;EAC7CC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGrB,aAAa,CAACY,cAAc,CAAC;AACzC,MAAMU,IAAI,GAAGpB,OAAO,CAACmB,GAAG,CAAC;AACzB,MAAME,SAAS,GAAGlB,mBAAmB,CAACgB,GAAG,EAAE;EACzCG,4BAA4B,EAAE,IAAI;EAClCC,eAAe,EAAE;AACnB,CAAC,CAAC;AAEF,MAAMC,cAAc,GAAG,IAAIzB,kBAAkB,CAAC,CAAC;AAC/C,MAAM0B,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMzB,eAAe,CAACmB,IAAI,EAAEI,cAAc,CAAC;IACvD,MAAMG,IAAI,GAAGD,GAAG,CAACC,IAAI;IACrB,MAAMC,CAAC,GAAGxB,KAAK,CAACE,UAAU,CAACe,SAAS,EAAE,OAAO,CAAC,EAAEd,KAAK,CAAC,KAAK,EAAE,IAAI,EAAEoB,IAAI,CAACE,GAAG,CAAC,CAAC;IAC7E,MAAMC,IAAI,GAAG,MAAMzB,OAAO,CAACuB,CAAC,CAAC;IAC7B,IAAIE,IAAI,CAACA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MAC1B,MAAMvB,MAAM,CAACF,UAAU,CAACe,SAAS,EAAE,OAAO,CAAC,EAAE;QAC3CQ,GAAG,EAAEF,IAAI,CAACE,GAAG;QACbG,IAAI,EAAEL,IAAI,CAACM,WAAW;QACtBC,YAAY,EAAE,QAAQ;QACtBC,KAAK,EAAER,IAAI,CAACQ;MACd,CAAC,CAAC;IACJ;IACAC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9BD,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEV,IAAI,CAACM,WAAW,CAAC;IACtCG,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEV,IAAI,CAACQ,KAAK,CAAC;EACnC,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZF,OAAO,CAACG,KAAK,CAACD,GAAG,CAAC;IAClBE,KAAK,CAACF,GAAG,CAACG,OAAO,CAAC;EACpB;AACF,CAAC;AAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACnBxC,OAAO,CAACkB,IAAI,CAAC;AACf,CAAC;AAED,SAASA,IAAI,EAAEC,SAAS,IAAIsB,EAAE,EAAElB,gBAAgB,EAAEiB,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}